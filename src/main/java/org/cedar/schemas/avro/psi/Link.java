/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.psi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Link extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8342225595228743129L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Link\",\"namespace\":\"org.cedar.psi.common.avro\",\"fields\":[{\"name\":\"linkName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkProtocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkFunction\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private String linkName;
   private String linkProtocol;
   private String linkUrl;
   private String linkDescription;
   private String linkFunction;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Link() {}

  /**
   * All-args constructor.
   * @param linkName The new value for linkName
   * @param linkProtocol The new value for linkProtocol
   * @param linkUrl The new value for linkUrl
   * @param linkDescription The new value for linkDescription
   * @param linkFunction The new value for linkFunction
   */
  public Link(String linkName, String linkProtocol, String linkUrl, String linkDescription, String linkFunction) {
    this.linkName = linkName;
    this.linkProtocol = linkProtocol;
    this.linkUrl = linkUrl;
    this.linkDescription = linkDescription;
    this.linkFunction = linkFunction;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return linkName;
    case 1: return linkProtocol;
    case 2: return linkUrl;
    case 3: return linkDescription;
    case 4: return linkFunction;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: linkName = (String)value$; break;
    case 1: linkProtocol = (String)value$; break;
    case 2: linkUrl = (String)value$; break;
    case 3: linkDescription = (String)value$; break;
    case 4: linkFunction = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'linkName' field.
   * @return The value of the 'linkName' field.
   */
  public String getLinkName() {
    return linkName;
  }


  /**
   * Gets the value of the 'linkProtocol' field.
   * @return The value of the 'linkProtocol' field.
   */
  public String getLinkProtocol() {
    return linkProtocol;
  }


  /**
   * Gets the value of the 'linkUrl' field.
   * @return The value of the 'linkUrl' field.
   */
  public String getLinkUrl() {
    return linkUrl;
  }


  /**
   * Gets the value of the 'linkDescription' field.
   * @return The value of the 'linkDescription' field.
   */
  public String getLinkDescription() {
    return linkDescription;
  }


  /**
   * Gets the value of the 'linkFunction' field.
   * @return The value of the 'linkFunction' field.
   */
  public String getLinkFunction() {
    return linkFunction;
  }


  /**
   * Creates a new Link RecordBuilder.
   * @return A new Link RecordBuilder
   */
  public static Link.Builder newBuilder() {
    return new Link.Builder();
  }

  /**
   * Creates a new Link RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Link RecordBuilder
   */
  public static Link.Builder newBuilder(Link.Builder other) {
    return new Link.Builder(other);
  }

  /**
   * Creates a new Link RecordBuilder by copying an existing Link instance.
   * @param other The existing instance to copy.
   * @return A new Link RecordBuilder
   */
  public static Link.Builder newBuilder(Link other) {
    return new Link.Builder(other);
  }

  /**
   * RecordBuilder for Link instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Link>
    implements org.apache.avro.data.RecordBuilder<Link> {

    private String linkName;
    private String linkProtocol;
    private String linkUrl;
    private String linkDescription;
    private String linkFunction;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Link.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.linkName)) {
        this.linkName = data().deepCopy(fields()[0].schema(), other.linkName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.linkProtocol)) {
        this.linkProtocol = data().deepCopy(fields()[1].schema(), other.linkProtocol);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.linkUrl)) {
        this.linkUrl = data().deepCopy(fields()[2].schema(), other.linkUrl);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.linkDescription)) {
        this.linkDescription = data().deepCopy(fields()[3].schema(), other.linkDescription);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.linkFunction)) {
        this.linkFunction = data().deepCopy(fields()[4].schema(), other.linkFunction);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Link instance
     * @param other The existing instance to copy.
     */
    private Builder(Link other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.linkName)) {
        this.linkName = data().deepCopy(fields()[0].schema(), other.linkName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.linkProtocol)) {
        this.linkProtocol = data().deepCopy(fields()[1].schema(), other.linkProtocol);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.linkUrl)) {
        this.linkUrl = data().deepCopy(fields()[2].schema(), other.linkUrl);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.linkDescription)) {
        this.linkDescription = data().deepCopy(fields()[3].schema(), other.linkDescription);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.linkFunction)) {
        this.linkFunction = data().deepCopy(fields()[4].schema(), other.linkFunction);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'linkName' field.
      * @return The value.
      */
    public String getLinkName() {
      return linkName;
    }

    /**
      * Sets the value of the 'linkName' field.
      * @param value The value of 'linkName'.
      * @return This builder.
      */
    public Link.Builder setLinkName(String value) {
      validate(fields()[0], value);
      this.linkName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'linkName' field has been set.
      * @return True if the 'linkName' field has been set, false otherwise.
      */
    public boolean hasLinkName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'linkName' field.
      * @return This builder.
      */
    public Link.Builder clearLinkName() {
      linkName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'linkProtocol' field.
      * @return The value.
      */
    public String getLinkProtocol() {
      return linkProtocol;
    }

    /**
      * Sets the value of the 'linkProtocol' field.
      * @param value The value of 'linkProtocol'.
      * @return This builder.
      */
    public Link.Builder setLinkProtocol(String value) {
      validate(fields()[1], value);
      this.linkProtocol = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'linkProtocol' field has been set.
      * @return True if the 'linkProtocol' field has been set, false otherwise.
      */
    public boolean hasLinkProtocol() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'linkProtocol' field.
      * @return This builder.
      */
    public Link.Builder clearLinkProtocol() {
      linkProtocol = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'linkUrl' field.
      * @return The value.
      */
    public String getLinkUrl() {
      return linkUrl;
    }

    /**
      * Sets the value of the 'linkUrl' field.
      * @param value The value of 'linkUrl'.
      * @return This builder.
      */
    public Link.Builder setLinkUrl(String value) {
      validate(fields()[2], value);
      this.linkUrl = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'linkUrl' field has been set.
      * @return True if the 'linkUrl' field has been set, false otherwise.
      */
    public boolean hasLinkUrl() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'linkUrl' field.
      * @return This builder.
      */
    public Link.Builder clearLinkUrl() {
      linkUrl = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'linkDescription' field.
      * @return The value.
      */
    public String getLinkDescription() {
      return linkDescription;
    }

    /**
      * Sets the value of the 'linkDescription' field.
      * @param value The value of 'linkDescription'.
      * @return This builder.
      */
    public Link.Builder setLinkDescription(String value) {
      validate(fields()[3], value);
      this.linkDescription = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'linkDescription' field has been set.
      * @return True if the 'linkDescription' field has been set, false otherwise.
      */
    public boolean hasLinkDescription() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'linkDescription' field.
      * @return This builder.
      */
    public Link.Builder clearLinkDescription() {
      linkDescription = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'linkFunction' field.
      * @return The value.
      */
    public String getLinkFunction() {
      return linkFunction;
    }

    /**
      * Sets the value of the 'linkFunction' field.
      * @param value The value of 'linkFunction'.
      * @return This builder.
      */
    public Link.Builder setLinkFunction(String value) {
      validate(fields()[4], value);
      this.linkFunction = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'linkFunction' field has been set.
      * @return True if the 'linkFunction' field has been set, false otherwise.
      */
    public boolean hasLinkFunction() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'linkFunction' field.
      * @return This builder.
      */
    public Link.Builder clearLinkFunction() {
      linkFunction = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Link build() {
      try {
        Link record = new Link();
        record.linkName = fieldSetFlags()[0] ? this.linkName : (String) defaultValue(fields()[0]);
        record.linkProtocol = fieldSetFlags()[1] ? this.linkProtocol : (String) defaultValue(fields()[1]);
        record.linkUrl = fieldSetFlags()[2] ? this.linkUrl : (String) defaultValue(fields()[2]);
        record.linkDescription = fieldSetFlags()[3] ? this.linkDescription : (String) defaultValue(fields()[3]);
        record.linkFunction = fieldSetFlags()[4] ? this.linkFunction : (String) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
