/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.psi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/**  */
@org.apache.avro.specific.AvroGenerated
public class ParsedRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1080514284413509423L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ParsedRecord\",\"namespace\":\"org.cedar.psi.common.avro\",\"doc\":\"\",\"fields\":[{\"name\":\"discovery\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Discovery\",\"doc\":\"The shape of the discovery object generated within Inventory Manager for a successfully parsed metadata document. This is the internal metadata format used within the system and ultimately sent downstream to OneStop.\",\"fields\":[{\"name\":\"fileIdentifier\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"parentIdentifier\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"hierarchyLevelName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"doi\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"purpose\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"credit\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"title\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"alternateTitle\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"keywords\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"KeywordsElement\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"default\":[]},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"namespace\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}},\"default\":[]},{\"name\":\"topicCategories\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"default\":[]},{\"name\":\"temporalBounding\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TemporalBounding\",\"fields\":[{\"name\":\"beginDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"beginIndeterminate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"endDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"endIndeterminate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"instant\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"instantIndeterminate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"spatialBounding\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Point\",\"doc\":\"A single position described with two values: longitude then latitude. A third (optional) value for elevation is allowed.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"PointType\",\"symbols\":[\"Point\"]}},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":[\"double\"]},\"default\":[]}]},{\"type\":\"record\",\"name\":\"MultiPoint\",\"doc\":\"An array of UNCONNECTED positions, each described with two values: longitude then latitude. A third (optional) value for elevation is allowed per position.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"MultiPointType\",\"symbols\":[\"MultiPoint\"]}},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"array\",\"items\":[\"double\"]}]},\"default\":[]}]},{\"type\":\"record\",\"name\":\"LineString\",\"doc\":\"An array of two or more CONNECTED positions, each described with two values: longitude then latitude. A third (optional) value for elevation is allowed per position. A LineString may self-cross.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"LineStringType\",\"symbols\":[\"LineString\"]}},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"array\",\"items\":[\"double\"]}]},\"default\":[]}]},{\"type\":\"record\",\"name\":\"MultiLineString\",\"doc\":\"An array of separate linestrings. A linestring is an array of two or more CONNECTED positions, each described with two values: longitude then latitude. A third (optional) value for elevation is allowed per position. Linestrings may self-cross.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"MultiLineStringType\",\"symbols\":[\"MultiLineString\"]}},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"array\",\"items\":[{\"type\":\"array\",\"items\":\"double\"}]}]},\"default\":[]}]},{\"type\":\"record\",\"name\":\"Polygon\",\"doc\":\"An array of linear rings, which are linestrings of four or more positions that are CLOSED, meaning the first and last positions are identical. The first (required) linear ring describes the polygon's exterior boundary. Subsequent (optional) linear rings describe holes in the polygon. Point positions MUST follow the right-hand rule for order, i.e., exterior rings are counterclockwise and holes are clockwise. Each point must be described with two values: longitude then latitude. A third (optional) value for elevation is allowed per position.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"PolygonType\",\"symbols\":[\"Polygon\"]}},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"array\",\"items\":[{\"type\":\"array\",\"items\":\"double\"}]}]},\"default\":[]}]},{\"type\":\"record\",\"name\":\"MultiPolygon\",\"doc\":\"An array of separate polygons. A polygon is an array of linear rings, which are linestrings of four or more positions that are CLOSED, meaning the first and last positions are identical. The first (required) linear ring describes the polygon's exterior boundary. Subsequent (optional) linear rings describe holes in the polygon. Point positions MUST follow the right-hand rule for order, i.e., exterior rings are counterclockwise and holes are clockwise. Each point must be described with two values: longitude then latitude. A third (optional) value for elevation is allowed per position.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"MultiPolygonType\",\"symbols\":[\"MultiPolygon\"]}},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"array\",\"items\":[{\"type\":\"array\",\"items\":[{\"type\":\"array\",\"items\":\"double\"}]}]}]},\"default\":[]}]}],\"default\":null},{\"name\":\"isGlobal\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"acquisitionInstruments\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Instruments\",\"fields\":[{\"name\":\"instrumentIdentifier\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"instrumentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"instrumentDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}},\"default\":[]},{\"name\":\"acquisitionOperations\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Operation\",\"fields\":[{\"name\":\"operationDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"operationIdentifier\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"operationStatus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"operationType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}},\"default\":[]},{\"name\":\"acquisitionPlatforms\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Platform\",\"fields\":[{\"name\":\"platformIdentifier\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"platformDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"platformSponsor\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"default\":[]}]}},\"default\":[]},{\"name\":\"dataFormats\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"DataFormat\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"version\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}},\"default\":[]},{\"name\":\"links\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Link\",\"fields\":[{\"name\":\"linkName\",\"type\":[\"null\",{\"","type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkProtocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkFunction\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}},\"default\":[]},{\"name\":\"responsibleParties\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ResponsibleParty\",\"fields\":[{\"name\":\"individualName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"organizationName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"positionName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"role\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"email\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"phone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}},\"default\":[]},{\"name\":\"thumbnail\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"thumbnailDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"creationDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"revisionDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"publicationDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"citeAsStatements\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"default\":[]},{\"name\":\"crossReferences\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Reference\",\"fields\":[{\"name\":\"title\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"date\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"links\",\"type\":{\"type\":\"array\",\"items\":\"Link\"},\"default\":[]}]}},\"default\":[]},{\"name\":\"largerWorks\",\"type\":{\"type\":\"array\",\"items\":\"Reference\"},\"default\":[]},{\"name\":\"useLimitation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"legalConstraints\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"default\":[]},{\"name\":\"accessFeeStatement\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"orderingInstructions\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"edition\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"dsmmAccessibility\",\"type\":\"int\",\"default\":0},{\"name\":\"dsmmDataIntegrity\",\"type\":\"int\",\"default\":0},{\"name\":\"dsmmDataQualityAssessment\",\"type\":\"int\",\"default\":0},{\"name\":\"dsmmDataQualityAssurance\",\"type\":\"int\",\"default\":0},{\"name\":\"dsmmDataQualityControlMonitoring\",\"type\":\"int\",\"default\":0},{\"name\":\"dsmmPreservability\",\"type\":\"int\",\"default\":0},{\"name\":\"dsmmProductionSustainability\",\"type\":\"int\",\"default\":0},{\"name\":\"dsmmTransparencyTraceability\",\"type\":\"int\",\"default\":0},{\"name\":\"dsmmUsability\",\"type\":\"int\",\"default\":0},{\"name\":\"dsmmAverage\",\"type\":\"float\",\"doc\":\"Calculated mean average of individual DSMM scores for Accessibility, Data Integrity, Data Quality Assessment, Data Quality Assurance, Data Quality Control Monitoring, Preservability, Production Sustainability, Transparency Traceability, and Usability.\",\"default\":0},{\"name\":\"updateFrequency\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"presentationForm\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"services\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Service\",\"fields\":[{\"name\":\"title\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"alternateTitle\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"date\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"dateType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"pointOfContact\",\"type\":[\"null\",\"ResponsibleParty\"],\"default\":null},{\"name\":\"operations\",\"type\":{\"type\":\"array\",\"items\":\"Link\"},\"default\":[]}]}},\"doc\":\"List of objects that represent an SV_ServiceIdentification section, if any, of ISO 19115 XML metadata document. Empty if not present.\",\"default\":[]}]}],\"default\":null},{\"name\":\"analysis\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Analysis\",\"doc\":\"The shape of the analysis object generated within Inventory Manager for a successfully parsed metadata document. Content within this object is related to the quality of the content of specific metadata fields, which can be used downstream to determine whether or not a given document should be accepted into another service, such as the OneStop search platform.\",\"fields\":[{\"name\":\"identification\",\"type\":{\"type\":\"record\",\"name\":\"IdentificationAnalysis\",\"fields\":[{\"name\":\"fileIdentifierExists\",\"type\":\"boolean\"},{\"name\":\"fileIdentifierString\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"doiExists\",\"type\":\"boolean\"},{\"name\":\"doiString\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"parentIdentifierExists\",\"type\":\"boolean\"},{\"name\":\"parentIdentifierString\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"hierarchyLevelNameExists\",\"type\":\"boolean\"},{\"name\":\"matchesIdentifiers\",\"type\":\"boolean\",\"doc\":\"Resolves to true if 'granule' specified as hierarchy level and both fileId & parentId provided OR if no hierarchy level specified.\"}]},\"doc\":\"Assessment of the identifying elements of the metadata.\"},{\"name\":\"titles\",\"type\":{\"type\":\"record\",\"name\":\"TitleAnalysis\",\"fields\":[{\"name\":\"titleExists\",\"type\":\"boolean\"},{\"name\":\"titleCharacters\",\"type\":\"int\"},{\"name\":\"alternateTitleExists\",\"type\":\"boolean\"},{\"name\":\"alternateTitleCharacters\",\"type\":\"int\"}]},\"doc\":\"Assessment of the titles in the metadata.\"},{\"name\":\"description\",\"type\":{\"type\":\"record\",\"name\":\"DescriptionAnalysis\",\"fields\":[{\"name\":\"descriptionExists\",\"type\":\"boolean\"},{\"name\":\"descriptionCharacters\",\"type\":\"int\"}]},\"doc\":\"Assessment of the titles in the metadata.\"},{\"name\":\"dataAccess\",\"type\":{\"type\":\"record\",\"name\":\"DataAccessAnalysis\",\"fields\":[{\"name\":\"dataAccessExists\",\"type\":\"boolean\"}]}},{\"name\":\"thumbnail\",\"type\":{\"type\":\"record\",\"name\":\"ThumbnailAnalysis\",\"fields\":[{\"name\":\"thumbnailExists\",\"type\":\"boolean\"}]}},{\"name\":\"temporalBounding\",\"type\":{\"type\":\"record\",\"name\":\"TemporalBoundingAnalysis\",\"fields\":[{\"name\":\"beginExists\",\"type\":\"boolean\"},{\"name\":\"beginPrecision\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"beginIndexable\",\"type\":\"boolean\"},{\"name\":\"beginZoneSpecified\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"beginUtcDateTimeString\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"endExists\",\"type\":\"boolean\"},{\"name\":\"endPrecision\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"endIndexable\",\"type\":\"boolean\"},{\"name\":\"endZoneSpecified\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"endUtcDateTimeString\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instantExists\",\"type\":\"boolean\"},{\"name\":\"instantPrecision\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instantIndexable\",\"type\":\"boolean\"},{\"name\":\"instantZoneSpecified\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instantUtcDateTimeString\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"rangeDescriptor\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"rangeBeginLTEEnd\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"boolean\"]}]}},{\"name\":\"spatialBounding\",\"type\":{\"type\":\"record\",\"name\":\"SpatialBoundingAnalysis\",\"fields","\":[{\"name\":\"spatialBoundingExists\",\"type\":\"boolean\"}]}}]}],\"default\":null},{\"name\":\"publishing\",\"type\":{\"type\":\"record\",\"name\":\"Publishing\",\"doc\":\"TBD\",\"fields\":[{\"name\":\"isPrivate\",\"type\":\"boolean\",\"default\":false},{\"name\":\"until\",\"type\":[\"null\",\"long\"],\"default\":null,\"logicalType\":\"timestamp-millis\"}]},\"default\":{\"isPrivate\":false,\"until\":null}},{\"name\":\"errors\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ErrorEvent\",\"doc\":\"Contains information about errors encountered while performing an operation\",\"fields\":[{\"name\":\"title\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"A short, human-readable summary of the problem that should not change from occurrence to occurrence of the problem.\",\"default\":null},{\"name\":\"detail\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"A human-readable explanation specific to this occurrence of the problem.\",\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"int\"],\"doc\":\"The HTTP status code applicable to this problem.\",\"default\":null},{\"name\":\"code\",\"type\":[\"null\",\"int\"],\"doc\":\"An application-specific error code.\",\"default\":null}]}},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private Discovery discovery;
   private Analysis analysis;
   private Publishing publishing;
   private java.util.List<ErrorEvent> errors;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ParsedRecord() {}

  /**
   * All-args constructor.
   * @param discovery The new value for discovery
   * @param analysis The new value for analysis
   * @param publishing The new value for publishing
   * @param errors The new value for errors
   */
  public ParsedRecord(Discovery discovery, Analysis analysis, Publishing publishing, java.util.List<ErrorEvent> errors) {
    this.discovery = discovery;
    this.analysis = analysis;
    this.publishing = publishing;
    this.errors = errors;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return discovery;
    case 1: return analysis;
    case 2: return publishing;
    case 3: return errors;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: discovery = (Discovery)value$; break;
    case 1: analysis = (Analysis)value$; break;
    case 2: publishing = (Publishing)value$; break;
    case 3: errors = (java.util.List<ErrorEvent>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'discovery' field.
   * @return The value of the 'discovery' field.
   */
  public Discovery getDiscovery() {
    return discovery;
  }


  /**
   * Gets the value of the 'analysis' field.
   * @return The value of the 'analysis' field.
   */
  public Analysis getAnalysis() {
    return analysis;
  }


  /**
   * Gets the value of the 'publishing' field.
   * @return The value of the 'publishing' field.
   */
  public Publishing getPublishing() {
    return publishing;
  }


  /**
   * Gets the value of the 'errors' field.
   * @return The value of the 'errors' field.
   */
  public java.util.List<ErrorEvent> getErrors() {
    return errors;
  }


  /**
   * Creates a new ParsedRecord RecordBuilder.
   * @return A new ParsedRecord RecordBuilder
   */
  public static ParsedRecord.Builder newBuilder() {
    return new ParsedRecord.Builder();
  }

  /**
   * Creates a new ParsedRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ParsedRecord RecordBuilder
   */
  public static ParsedRecord.Builder newBuilder(ParsedRecord.Builder other) {
    return new ParsedRecord.Builder(other);
  }

  /**
   * Creates a new ParsedRecord RecordBuilder by copying an existing ParsedRecord instance.
   * @param other The existing instance to copy.
   * @return A new ParsedRecord RecordBuilder
   */
  public static ParsedRecord.Builder newBuilder(ParsedRecord other) {
    return new ParsedRecord.Builder(other);
  }

  /**
   * RecordBuilder for ParsedRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ParsedRecord>
    implements org.apache.avro.data.RecordBuilder<ParsedRecord> {

    private Discovery discovery;
    private Discovery.Builder discoveryBuilder;
    private Analysis analysis;
    private Analysis.Builder analysisBuilder;
    private Publishing publishing;
    private Publishing.Builder publishingBuilder;
    private java.util.List<ErrorEvent> errors;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ParsedRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.discovery)) {
        this.discovery = data().deepCopy(fields()[0].schema(), other.discovery);
        fieldSetFlags()[0] = true;
      }
      if (other.hasDiscoveryBuilder()) {
        this.discoveryBuilder = Discovery.newBuilder(other.getDiscoveryBuilder());
      }
      if (isValidValue(fields()[1], other.analysis)) {
        this.analysis = data().deepCopy(fields()[1].schema(), other.analysis);
        fieldSetFlags()[1] = true;
      }
      if (other.hasAnalysisBuilder()) {
        this.analysisBuilder = Analysis.newBuilder(other.getAnalysisBuilder());
      }
      if (isValidValue(fields()[2], other.publishing)) {
        this.publishing = data().deepCopy(fields()[2].schema(), other.publishing);
        fieldSetFlags()[2] = true;
      }
      if (other.hasPublishingBuilder()) {
        this.publishingBuilder = Publishing.newBuilder(other.getPublishingBuilder());
      }
      if (isValidValue(fields()[3], other.errors)) {
        this.errors = data().deepCopy(fields()[3].schema(), other.errors);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ParsedRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(ParsedRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.discovery)) {
        this.discovery = data().deepCopy(fields()[0].schema(), other.discovery);
        fieldSetFlags()[0] = true;
      }
      this.discoveryBuilder = null;
      if (isValidValue(fields()[1], other.analysis)) {
        this.analysis = data().deepCopy(fields()[1].schema(), other.analysis);
        fieldSetFlags()[1] = true;
      }
      this.analysisBuilder = null;
      if (isValidValue(fields()[2], other.publishing)) {
        this.publishing = data().deepCopy(fields()[2].schema(), other.publishing);
        fieldSetFlags()[2] = true;
      }
      this.publishingBuilder = null;
      if (isValidValue(fields()[3], other.errors)) {
        this.errors = data().deepCopy(fields()[3].schema(), other.errors);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'discovery' field.
      * @return The value.
      */
    public Discovery getDiscovery() {
      return discovery;
    }

    /**
      * Sets the value of the 'discovery' field.
      * @param value The value of 'discovery'.
      * @return This builder.
      */
    public ParsedRecord.Builder setDiscovery(Discovery value) {
      validate(fields()[0], value);
      this.discoveryBuilder = null;
      this.discovery = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'discovery' field has been set.
      * @return True if the 'discovery' field has been set, false otherwise.
      */
    public boolean hasDiscovery() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'discovery' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Discovery.Builder getDiscoveryBuilder() {
      if (discoveryBuilder == null) {
        if (hasDiscovery()) {
          setDiscoveryBuilder(Discovery.newBuilder(discovery));
        } else {
          setDiscoveryBuilder(Discovery.newBuilder());
        }
      }
      return discoveryBuilder;
    }

    /**
     * Sets the Builder instance for the 'discovery' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public ParsedRecord.Builder setDiscoveryBuilder(Discovery.Builder value) {
      clearDiscovery();
      discoveryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'discovery' field has an active Builder instance
     * @return True if the 'discovery' field has an active Builder instance
     */
    public boolean hasDiscoveryBuilder() {
      return discoveryBuilder != null;
    }

    /**
      * Clears the value of the 'discovery' field.
      * @return This builder.
      */
    public ParsedRecord.Builder clearDiscovery() {
      discovery = null;
      discoveryBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'analysis' field.
      * @return The value.
      */
    public Analysis getAnalysis() {
      return analysis;
    }

    /**
      * Sets the value of the 'analysis' field.
      * @param value The value of 'analysis'.
      * @return This builder.
      */
    public ParsedRecord.Builder setAnalysis(Analysis value) {
      validate(fields()[1], value);
      this.analysisBuilder = null;
      this.analysis = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'analysis' field has been set.
      * @return True if the 'analysis' field has been set, false otherwise.
      */
    public boolean hasAnalysis() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'analysis' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Analysis.Builder getAnalysisBuilder() {
      if (analysisBuilder == null) {
        if (hasAnalysis()) {
          setAnalysisBuilder(Analysis.newBuilder(analysis));
        } else {
          setAnalysisBuilder(Analysis.newBuilder());
        }
      }
      return analysisBuilder;
    }

    /**
     * Sets the Builder instance for the 'analysis' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public ParsedRecord.Builder setAnalysisBuilder(Analysis.Builder value) {
      clearAnalysis();
      analysisBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'analysis' field has an active Builder instance
     * @return True if the 'analysis' field has an active Builder instance
     */
    public boolean hasAnalysisBuilder() {
      return analysisBuilder != null;
    }

    /**
      * Clears the value of the 'analysis' field.
      * @return This builder.
      */
    public ParsedRecord.Builder clearAnalysis() {
      analysis = null;
      analysisBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'publishing' field.
      * @return The value.
      */
    public Publishing getPublishing() {
      return publishing;
    }

    /**
      * Sets the value of the 'publishing' field.
      * @param value The value of 'publishing'.
      * @return This builder.
      */
    public ParsedRecord.Builder setPublishing(Publishing value) {
      validate(fields()[2], value);
      this.publishingBuilder = null;
      this.publishing = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'publishing' field has been set.
      * @return True if the 'publishing' field has been set, false otherwise.
      */
    public boolean hasPublishing() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'publishing' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Publishing.Builder getPublishingBuilder() {
      if (publishingBuilder == null) {
        if (hasPublishing()) {
          setPublishingBuilder(Publishing.newBuilder(publishing));
        } else {
          setPublishingBuilder(Publishing.newBuilder());
        }
      }
      return publishingBuilder;
    }

    /**
     * Sets the Builder instance for the 'publishing' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public ParsedRecord.Builder setPublishingBuilder(Publishing.Builder value) {
      clearPublishing();
      publishingBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'publishing' field has an active Builder instance
     * @return True if the 'publishing' field has an active Builder instance
     */
    public boolean hasPublishingBuilder() {
      return publishingBuilder != null;
    }

    /**
      * Clears the value of the 'publishing' field.
      * @return This builder.
      */
    public ParsedRecord.Builder clearPublishing() {
      publishing = null;
      publishingBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'errors' field.
      * @return The value.
      */
    public java.util.List<ErrorEvent> getErrors() {
      return errors;
    }

    /**
      * Sets the value of the 'errors' field.
      * @param value The value of 'errors'.
      * @return This builder.
      */
    public ParsedRecord.Builder setErrors(java.util.List<ErrorEvent> value) {
      validate(fields()[3], value);
      this.errors = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'errors' field has been set.
      * @return True if the 'errors' field has been set, false otherwise.
      */
    public boolean hasErrors() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'errors' field.
      * @return This builder.
      */
    public ParsedRecord.Builder clearErrors() {
      errors = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ParsedRecord build() {
      try {
        ParsedRecord record = new ParsedRecord();
        if (discoveryBuilder != null) {
          record.discovery = this.discoveryBuilder.build();
        } else {
          record.discovery = fieldSetFlags()[0] ? this.discovery : (Discovery) defaultValue(fields()[0]);
        }
        if (analysisBuilder != null) {
          record.analysis = this.analysisBuilder.build();
        } else {
          record.analysis = fieldSetFlags()[1] ? this.analysis : (Analysis) defaultValue(fields()[1]);
        }
        if (publishingBuilder != null) {
          record.publishing = this.publishingBuilder.build();
        } else {
          record.publishing = fieldSetFlags()[2] ? this.publishing : (Publishing) defaultValue(fields()[2]);
        }
        record.errors = fieldSetFlags()[3] ? this.errors : (java.util.List<ErrorEvent>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
