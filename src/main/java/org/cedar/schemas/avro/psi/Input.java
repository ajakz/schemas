/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.psi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** This event records incoming request */
@org.apache.avro.specific.AvroGenerated
public class Input extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2173915459839221879L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Input\",\"namespace\":\"org.cedar.psi.common.avro\",\"doc\":\"This event records incoming request\",\"fields\":[{\"name\":\"content\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"contentType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"host\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"method\",\"type\":{\"type\":\"enum\",\"name\":\"Method\",\"doc\":\"An HTTP request method\",\"symbols\":[\"HEAD\",\"OPTIONS\",\"GET\",\"POST\",\"PUT\",\"PATCH\",\"DELETE\",\"TRACE\",\"CONNECT\"]}},{\"name\":\"protocol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"requestUrl\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"source\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private String content;
   private String contentType;
   private String host;
   private Method method;
   private String protocol;
   private String requestUrl;
   private String source;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Input() {}

  /**
   * All-args constructor.
   * @param content The new value for content
   * @param contentType The new value for contentType
   * @param host The new value for host
   * @param method The new value for method
   * @param protocol The new value for protocol
   * @param requestUrl The new value for requestUrl
   * @param source The new value for source
   */
  public Input(String content, String contentType, String host, Method method, String protocol, String requestUrl, String source) {
    this.content = content;
    this.contentType = contentType;
    this.host = host;
    this.method = method;
    this.protocol = protocol;
    this.requestUrl = requestUrl;
    this.source = source;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return content;
    case 1: return contentType;
    case 2: return host;
    case 3: return method;
    case 4: return protocol;
    case 5: return requestUrl;
    case 6: return source;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: content = (String)value$; break;
    case 1: contentType = (String)value$; break;
    case 2: host = (String)value$; break;
    case 3: method = (Method)value$; break;
    case 4: protocol = (String)value$; break;
    case 5: requestUrl = (String)value$; break;
    case 6: source = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'content' field.
   * @return The value of the 'content' field.
   */
  public String getContent() {
    return content;
  }


  /**
   * Gets the value of the 'contentType' field.
   * @return The value of the 'contentType' field.
   */
  public String getContentType() {
    return contentType;
  }


  /**
   * Gets the value of the 'host' field.
   * @return The value of the 'host' field.
   */
  public String getHost() {
    return host;
  }


  /**
   * Gets the value of the 'method' field.
   * @return The value of the 'method' field.
   */
  public Method getMethod() {
    return method;
  }


  /**
   * Gets the value of the 'protocol' field.
   * @return The value of the 'protocol' field.
   */
  public String getProtocol() {
    return protocol;
  }


  /**
   * Gets the value of the 'requestUrl' field.
   * @return The value of the 'requestUrl' field.
   */
  public String getRequestUrl() {
    return requestUrl;
  }


  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public String getSource() {
    return source;
  }


  /**
   * Creates a new Input RecordBuilder.
   * @return A new Input RecordBuilder
   */
  public static Input.Builder newBuilder() {
    return new Input.Builder();
  }

  /**
   * Creates a new Input RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Input RecordBuilder
   */
  public static Input.Builder newBuilder(Input.Builder other) {
    return new Input.Builder(other);
  }

  /**
   * Creates a new Input RecordBuilder by copying an existing Input instance.
   * @param other The existing instance to copy.
   * @return A new Input RecordBuilder
   */
  public static Input.Builder newBuilder(Input other) {
    return new Input.Builder(other);
  }

  /**
   * RecordBuilder for Input instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Input>
    implements org.apache.avro.data.RecordBuilder<Input> {

    private String content;
    private String contentType;
    private String host;
    private Method method;
    private String protocol;
    private String requestUrl;
    private String source;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Input.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.content)) {
        this.content = data().deepCopy(fields()[0].schema(), other.content);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.contentType)) {
        this.contentType = data().deepCopy(fields()[1].schema(), other.contentType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.host)) {
        this.host = data().deepCopy(fields()[2].schema(), other.host);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.method)) {
        this.method = data().deepCopy(fields()[3].schema(), other.method);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.protocol)) {
        this.protocol = data().deepCopy(fields()[4].schema(), other.protocol);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.requestUrl)) {
        this.requestUrl = data().deepCopy(fields()[5].schema(), other.requestUrl);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.source)) {
        this.source = data().deepCopy(fields()[6].schema(), other.source);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Input instance
     * @param other The existing instance to copy.
     */
    private Builder(Input other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.content)) {
        this.content = data().deepCopy(fields()[0].schema(), other.content);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.contentType)) {
        this.contentType = data().deepCopy(fields()[1].schema(), other.contentType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.host)) {
        this.host = data().deepCopy(fields()[2].schema(), other.host);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.method)) {
        this.method = data().deepCopy(fields()[3].schema(), other.method);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.protocol)) {
        this.protocol = data().deepCopy(fields()[4].schema(), other.protocol);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.requestUrl)) {
        this.requestUrl = data().deepCopy(fields()[5].schema(), other.requestUrl);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.source)) {
        this.source = data().deepCopy(fields()[6].schema(), other.source);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'content' field.
      * @return The value.
      */
    public String getContent() {
      return content;
    }

    /**
      * Sets the value of the 'content' field.
      * @param value The value of 'content'.
      * @return This builder.
      */
    public Input.Builder setContent(String value) {
      validate(fields()[0], value);
      this.content = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'content' field has been set.
      * @return True if the 'content' field has been set, false otherwise.
      */
    public boolean hasContent() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'content' field.
      * @return This builder.
      */
    public Input.Builder clearContent() {
      content = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'contentType' field.
      * @return The value.
      */
    public String getContentType() {
      return contentType;
    }

    /**
      * Sets the value of the 'contentType' field.
      * @param value The value of 'contentType'.
      * @return This builder.
      */
    public Input.Builder setContentType(String value) {
      validate(fields()[1], value);
      this.contentType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'contentType' field has been set.
      * @return True if the 'contentType' field has been set, false otherwise.
      */
    public boolean hasContentType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'contentType' field.
      * @return This builder.
      */
    public Input.Builder clearContentType() {
      contentType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'host' field.
      * @return The value.
      */
    public String getHost() {
      return host;
    }

    /**
      * Sets the value of the 'host' field.
      * @param value The value of 'host'.
      * @return This builder.
      */
    public Input.Builder setHost(String value) {
      validate(fields()[2], value);
      this.host = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'host' field has been set.
      * @return True if the 'host' field has been set, false otherwise.
      */
    public boolean hasHost() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'host' field.
      * @return This builder.
      */
    public Input.Builder clearHost() {
      host = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'method' field.
      * @return The value.
      */
    public Method getMethod() {
      return method;
    }

    /**
      * Sets the value of the 'method' field.
      * @param value The value of 'method'.
      * @return This builder.
      */
    public Input.Builder setMethod(Method value) {
      validate(fields()[3], value);
      this.method = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'method' field has been set.
      * @return True if the 'method' field has been set, false otherwise.
      */
    public boolean hasMethod() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'method' field.
      * @return This builder.
      */
    public Input.Builder clearMethod() {
      method = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'protocol' field.
      * @return The value.
      */
    public String getProtocol() {
      return protocol;
    }

    /**
      * Sets the value of the 'protocol' field.
      * @param value The value of 'protocol'.
      * @return This builder.
      */
    public Input.Builder setProtocol(String value) {
      validate(fields()[4], value);
      this.protocol = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'protocol' field has been set.
      * @return True if the 'protocol' field has been set, false otherwise.
      */
    public boolean hasProtocol() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'protocol' field.
      * @return This builder.
      */
    public Input.Builder clearProtocol() {
      protocol = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestUrl' field.
      * @return The value.
      */
    public String getRequestUrl() {
      return requestUrl;
    }

    /**
      * Sets the value of the 'requestUrl' field.
      * @param value The value of 'requestUrl'.
      * @return This builder.
      */
    public Input.Builder setRequestUrl(String value) {
      validate(fields()[5], value);
      this.requestUrl = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'requestUrl' field has been set.
      * @return True if the 'requestUrl' field has been set, false otherwise.
      */
    public boolean hasRequestUrl() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'requestUrl' field.
      * @return This builder.
      */
    public Input.Builder clearRequestUrl() {
      requestUrl = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public String getSource() {
      return source;
    }

    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public Input.Builder setSource(String value) {
      validate(fields()[6], value);
      this.source = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public Input.Builder clearSource() {
      source = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Input build() {
      try {
        Input record = new Input();
        record.content = fieldSetFlags()[0] ? this.content : (String) defaultValue(fields()[0]);
        record.contentType = fieldSetFlags()[1] ? this.contentType : (String) defaultValue(fields()[1]);
        record.host = fieldSetFlags()[2] ? this.host : (String) defaultValue(fields()[2]);
        record.method = fieldSetFlags()[3] ? this.method : (Method) defaultValue(fields()[3]);
        record.protocol = fieldSetFlags()[4] ? this.protocol : (String) defaultValue(fields()[4]);
        record.requestUrl = fieldSetFlags()[5] ? this.requestUrl : (String) defaultValue(fields()[5]);
        record.source = fieldSetFlags()[6] ? this.source : (String) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
