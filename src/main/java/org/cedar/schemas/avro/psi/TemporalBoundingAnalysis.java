/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.psi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TemporalBoundingAnalysis extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6470880529032758711L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TemporalBoundingAnalysis\",\"namespace\":\"org.cedar.psi.common.avro\",\"fields\":[{\"name\":\"beginExists\",\"type\":\"boolean\"},{\"name\":\"beginPrecision\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"beginIndexable\",\"type\":\"boolean\"},{\"name\":\"beginZoneSpecified\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"beginUtcDateTimeString\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"endExists\",\"type\":\"boolean\"},{\"name\":\"endPrecision\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"endIndexable\",\"type\":\"boolean\"},{\"name\":\"endZoneSpecified\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"endUtcDateTimeString\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instantExists\",\"type\":\"boolean\"},{\"name\":\"instantPrecision\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instantIndexable\",\"type\":\"boolean\"},{\"name\":\"instantZoneSpecified\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instantUtcDateTimeString\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"rangeDescriptor\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"rangeBeginLTEEnd\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"boolean\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private boolean beginExists;
   private String beginPrecision;
   private boolean beginIndexable;
   private String beginZoneSpecified;
   private String beginUtcDateTimeString;
   private boolean endExists;
   private String endPrecision;
   private boolean endIndexable;
   private String endZoneSpecified;
   private String endUtcDateTimeString;
   private boolean instantExists;
   private String instantPrecision;
   private boolean instantIndexable;
   private String instantZoneSpecified;
   private String instantUtcDateTimeString;
   private String rangeDescriptor;
   private Object rangeBeginLTEEnd;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TemporalBoundingAnalysis() {}

  /**
   * All-args constructor.
   * @param beginExists The new value for beginExists
   * @param beginPrecision The new value for beginPrecision
   * @param beginIndexable The new value for beginIndexable
   * @param beginZoneSpecified The new value for beginZoneSpecified
   * @param beginUtcDateTimeString The new value for beginUtcDateTimeString
   * @param endExists The new value for endExists
   * @param endPrecision The new value for endPrecision
   * @param endIndexable The new value for endIndexable
   * @param endZoneSpecified The new value for endZoneSpecified
   * @param endUtcDateTimeString The new value for endUtcDateTimeString
   * @param instantExists The new value for instantExists
   * @param instantPrecision The new value for instantPrecision
   * @param instantIndexable The new value for instantIndexable
   * @param instantZoneSpecified The new value for instantZoneSpecified
   * @param instantUtcDateTimeString The new value for instantUtcDateTimeString
   * @param rangeDescriptor The new value for rangeDescriptor
   * @param rangeBeginLTEEnd The new value for rangeBeginLTEEnd
   */
  public TemporalBoundingAnalysis(Boolean beginExists, String beginPrecision, Boolean beginIndexable, String beginZoneSpecified, String beginUtcDateTimeString, Boolean endExists, String endPrecision, Boolean endIndexable, String endZoneSpecified, String endUtcDateTimeString, Boolean instantExists, String instantPrecision, Boolean instantIndexable, String instantZoneSpecified, String instantUtcDateTimeString, String rangeDescriptor, Object rangeBeginLTEEnd) {
    this.beginExists = beginExists;
    this.beginPrecision = beginPrecision;
    this.beginIndexable = beginIndexable;
    this.beginZoneSpecified = beginZoneSpecified;
    this.beginUtcDateTimeString = beginUtcDateTimeString;
    this.endExists = endExists;
    this.endPrecision = endPrecision;
    this.endIndexable = endIndexable;
    this.endZoneSpecified = endZoneSpecified;
    this.endUtcDateTimeString = endUtcDateTimeString;
    this.instantExists = instantExists;
    this.instantPrecision = instantPrecision;
    this.instantIndexable = instantIndexable;
    this.instantZoneSpecified = instantZoneSpecified;
    this.instantUtcDateTimeString = instantUtcDateTimeString;
    this.rangeDescriptor = rangeDescriptor;
    this.rangeBeginLTEEnd = rangeBeginLTEEnd;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return beginExists;
    case 1: return beginPrecision;
    case 2: return beginIndexable;
    case 3: return beginZoneSpecified;
    case 4: return beginUtcDateTimeString;
    case 5: return endExists;
    case 6: return endPrecision;
    case 7: return endIndexable;
    case 8: return endZoneSpecified;
    case 9: return endUtcDateTimeString;
    case 10: return instantExists;
    case 11: return instantPrecision;
    case 12: return instantIndexable;
    case 13: return instantZoneSpecified;
    case 14: return instantUtcDateTimeString;
    case 15: return rangeDescriptor;
    case 16: return rangeBeginLTEEnd;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: beginExists = (Boolean)value$; break;
    case 1: beginPrecision = (String)value$; break;
    case 2: beginIndexable = (Boolean)value$; break;
    case 3: beginZoneSpecified = (String)value$; break;
    case 4: beginUtcDateTimeString = (String)value$; break;
    case 5: endExists = (Boolean)value$; break;
    case 6: endPrecision = (String)value$; break;
    case 7: endIndexable = (Boolean)value$; break;
    case 8: endZoneSpecified = (String)value$; break;
    case 9: endUtcDateTimeString = (String)value$; break;
    case 10: instantExists = (Boolean)value$; break;
    case 11: instantPrecision = (String)value$; break;
    case 12: instantIndexable = (Boolean)value$; break;
    case 13: instantZoneSpecified = (String)value$; break;
    case 14: instantUtcDateTimeString = (String)value$; break;
    case 15: rangeDescriptor = (String)value$; break;
    case 16: rangeBeginLTEEnd = (Object)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'beginExists' field.
   * @return The value of the 'beginExists' field.
   */
  public Boolean getBeginExists() {
    return beginExists;
  }


  /**
   * Gets the value of the 'beginPrecision' field.
   * @return The value of the 'beginPrecision' field.
   */
  public String getBeginPrecision() {
    return beginPrecision;
  }


  /**
   * Gets the value of the 'beginIndexable' field.
   * @return The value of the 'beginIndexable' field.
   */
  public Boolean getBeginIndexable() {
    return beginIndexable;
  }


  /**
   * Gets the value of the 'beginZoneSpecified' field.
   * @return The value of the 'beginZoneSpecified' field.
   */
  public String getBeginZoneSpecified() {
    return beginZoneSpecified;
  }


  /**
   * Gets the value of the 'beginUtcDateTimeString' field.
   * @return The value of the 'beginUtcDateTimeString' field.
   */
  public String getBeginUtcDateTimeString() {
    return beginUtcDateTimeString;
  }


  /**
   * Gets the value of the 'endExists' field.
   * @return The value of the 'endExists' field.
   */
  public Boolean getEndExists() {
    return endExists;
  }


  /**
   * Gets the value of the 'endPrecision' field.
   * @return The value of the 'endPrecision' field.
   */
  public String getEndPrecision() {
    return endPrecision;
  }


  /**
   * Gets the value of the 'endIndexable' field.
   * @return The value of the 'endIndexable' field.
   */
  public Boolean getEndIndexable() {
    return endIndexable;
  }


  /**
   * Gets the value of the 'endZoneSpecified' field.
   * @return The value of the 'endZoneSpecified' field.
   */
  public String getEndZoneSpecified() {
    return endZoneSpecified;
  }


  /**
   * Gets the value of the 'endUtcDateTimeString' field.
   * @return The value of the 'endUtcDateTimeString' field.
   */
  public String getEndUtcDateTimeString() {
    return endUtcDateTimeString;
  }


  /**
   * Gets the value of the 'instantExists' field.
   * @return The value of the 'instantExists' field.
   */
  public Boolean getInstantExists() {
    return instantExists;
  }


  /**
   * Gets the value of the 'instantPrecision' field.
   * @return The value of the 'instantPrecision' field.
   */
  public String getInstantPrecision() {
    return instantPrecision;
  }


  /**
   * Gets the value of the 'instantIndexable' field.
   * @return The value of the 'instantIndexable' field.
   */
  public Boolean getInstantIndexable() {
    return instantIndexable;
  }


  /**
   * Gets the value of the 'instantZoneSpecified' field.
   * @return The value of the 'instantZoneSpecified' field.
   */
  public String getInstantZoneSpecified() {
    return instantZoneSpecified;
  }


  /**
   * Gets the value of the 'instantUtcDateTimeString' field.
   * @return The value of the 'instantUtcDateTimeString' field.
   */
  public String getInstantUtcDateTimeString() {
    return instantUtcDateTimeString;
  }


  /**
   * Gets the value of the 'rangeDescriptor' field.
   * @return The value of the 'rangeDescriptor' field.
   */
  public String getRangeDescriptor() {
    return rangeDescriptor;
  }


  /**
   * Gets the value of the 'rangeBeginLTEEnd' field.
   * @return The value of the 'rangeBeginLTEEnd' field.
   */
  public Object getRangeBeginLTEEnd() {
    return rangeBeginLTEEnd;
  }


  /**
   * Creates a new TemporalBoundingAnalysis RecordBuilder.
   * @return A new TemporalBoundingAnalysis RecordBuilder
   */
  public static TemporalBoundingAnalysis.Builder newBuilder() {
    return new TemporalBoundingAnalysis.Builder();
  }

  /**
   * Creates a new TemporalBoundingAnalysis RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TemporalBoundingAnalysis RecordBuilder
   */
  public static TemporalBoundingAnalysis.Builder newBuilder(TemporalBoundingAnalysis.Builder other) {
    return new TemporalBoundingAnalysis.Builder(other);
  }

  /**
   * Creates a new TemporalBoundingAnalysis RecordBuilder by copying an existing TemporalBoundingAnalysis instance.
   * @param other The existing instance to copy.
   * @return A new TemporalBoundingAnalysis RecordBuilder
   */
  public static TemporalBoundingAnalysis.Builder newBuilder(TemporalBoundingAnalysis other) {
    return new TemporalBoundingAnalysis.Builder(other);
  }

  /**
   * RecordBuilder for TemporalBoundingAnalysis instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TemporalBoundingAnalysis>
    implements org.apache.avro.data.RecordBuilder<TemporalBoundingAnalysis> {

    private boolean beginExists;
    private String beginPrecision;
    private boolean beginIndexable;
    private String beginZoneSpecified;
    private String beginUtcDateTimeString;
    private boolean endExists;
    private String endPrecision;
    private boolean endIndexable;
    private String endZoneSpecified;
    private String endUtcDateTimeString;
    private boolean instantExists;
    private String instantPrecision;
    private boolean instantIndexable;
    private String instantZoneSpecified;
    private String instantUtcDateTimeString;
    private String rangeDescriptor;
    private Object rangeBeginLTEEnd;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(TemporalBoundingAnalysis.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.beginExists)) {
        this.beginExists = data().deepCopy(fields()[0].schema(), other.beginExists);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.beginPrecision)) {
        this.beginPrecision = data().deepCopy(fields()[1].schema(), other.beginPrecision);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.beginIndexable)) {
        this.beginIndexable = data().deepCopy(fields()[2].schema(), other.beginIndexable);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.beginZoneSpecified)) {
        this.beginZoneSpecified = data().deepCopy(fields()[3].schema(), other.beginZoneSpecified);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.beginUtcDateTimeString)) {
        this.beginUtcDateTimeString = data().deepCopy(fields()[4].schema(), other.beginUtcDateTimeString);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.endExists)) {
        this.endExists = data().deepCopy(fields()[5].schema(), other.endExists);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.endPrecision)) {
        this.endPrecision = data().deepCopy(fields()[6].schema(), other.endPrecision);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.endIndexable)) {
        this.endIndexable = data().deepCopy(fields()[7].schema(), other.endIndexable);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.endZoneSpecified)) {
        this.endZoneSpecified = data().deepCopy(fields()[8].schema(), other.endZoneSpecified);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.endUtcDateTimeString)) {
        this.endUtcDateTimeString = data().deepCopy(fields()[9].schema(), other.endUtcDateTimeString);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.instantExists)) {
        this.instantExists = data().deepCopy(fields()[10].schema(), other.instantExists);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.instantPrecision)) {
        this.instantPrecision = data().deepCopy(fields()[11].schema(), other.instantPrecision);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.instantIndexable)) {
        this.instantIndexable = data().deepCopy(fields()[12].schema(), other.instantIndexable);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.instantZoneSpecified)) {
        this.instantZoneSpecified = data().deepCopy(fields()[13].schema(), other.instantZoneSpecified);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.instantUtcDateTimeString)) {
        this.instantUtcDateTimeString = data().deepCopy(fields()[14].schema(), other.instantUtcDateTimeString);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.rangeDescriptor)) {
        this.rangeDescriptor = data().deepCopy(fields()[15].schema(), other.rangeDescriptor);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.rangeBeginLTEEnd)) {
        this.rangeBeginLTEEnd = data().deepCopy(fields()[16].schema(), other.rangeBeginLTEEnd);
        fieldSetFlags()[16] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TemporalBoundingAnalysis instance
     * @param other The existing instance to copy.
     */
    private Builder(TemporalBoundingAnalysis other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.beginExists)) {
        this.beginExists = data().deepCopy(fields()[0].schema(), other.beginExists);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.beginPrecision)) {
        this.beginPrecision = data().deepCopy(fields()[1].schema(), other.beginPrecision);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.beginIndexable)) {
        this.beginIndexable = data().deepCopy(fields()[2].schema(), other.beginIndexable);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.beginZoneSpecified)) {
        this.beginZoneSpecified = data().deepCopy(fields()[3].schema(), other.beginZoneSpecified);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.beginUtcDateTimeString)) {
        this.beginUtcDateTimeString = data().deepCopy(fields()[4].schema(), other.beginUtcDateTimeString);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.endExists)) {
        this.endExists = data().deepCopy(fields()[5].schema(), other.endExists);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.endPrecision)) {
        this.endPrecision = data().deepCopy(fields()[6].schema(), other.endPrecision);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.endIndexable)) {
        this.endIndexable = data().deepCopy(fields()[7].schema(), other.endIndexable);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.endZoneSpecified)) {
        this.endZoneSpecified = data().deepCopy(fields()[8].schema(), other.endZoneSpecified);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.endUtcDateTimeString)) {
        this.endUtcDateTimeString = data().deepCopy(fields()[9].schema(), other.endUtcDateTimeString);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.instantExists)) {
        this.instantExists = data().deepCopy(fields()[10].schema(), other.instantExists);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.instantPrecision)) {
        this.instantPrecision = data().deepCopy(fields()[11].schema(), other.instantPrecision);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.instantIndexable)) {
        this.instantIndexable = data().deepCopy(fields()[12].schema(), other.instantIndexable);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.instantZoneSpecified)) {
        this.instantZoneSpecified = data().deepCopy(fields()[13].schema(), other.instantZoneSpecified);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.instantUtcDateTimeString)) {
        this.instantUtcDateTimeString = data().deepCopy(fields()[14].schema(), other.instantUtcDateTimeString);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.rangeDescriptor)) {
        this.rangeDescriptor = data().deepCopy(fields()[15].schema(), other.rangeDescriptor);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.rangeBeginLTEEnd)) {
        this.rangeBeginLTEEnd = data().deepCopy(fields()[16].schema(), other.rangeBeginLTEEnd);
        fieldSetFlags()[16] = true;
      }
    }

    /**
      * Gets the value of the 'beginExists' field.
      * @return The value.
      */
    public Boolean getBeginExists() {
      return beginExists;
    }

    /**
      * Sets the value of the 'beginExists' field.
      * @param value The value of 'beginExists'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setBeginExists(boolean value) {
      validate(fields()[0], value);
      this.beginExists = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'beginExists' field has been set.
      * @return True if the 'beginExists' field has been set, false otherwise.
      */
    public boolean hasBeginExists() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'beginExists' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearBeginExists() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'beginPrecision' field.
      * @return The value.
      */
    public String getBeginPrecision() {
      return beginPrecision;
    }

    /**
      * Sets the value of the 'beginPrecision' field.
      * @param value The value of 'beginPrecision'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setBeginPrecision(String value) {
      validate(fields()[1], value);
      this.beginPrecision = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'beginPrecision' field has been set.
      * @return True if the 'beginPrecision' field has been set, false otherwise.
      */
    public boolean hasBeginPrecision() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'beginPrecision' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearBeginPrecision() {
      beginPrecision = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'beginIndexable' field.
      * @return The value.
      */
    public Boolean getBeginIndexable() {
      return beginIndexable;
    }

    /**
      * Sets the value of the 'beginIndexable' field.
      * @param value The value of 'beginIndexable'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setBeginIndexable(boolean value) {
      validate(fields()[2], value);
      this.beginIndexable = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'beginIndexable' field has been set.
      * @return True if the 'beginIndexable' field has been set, false otherwise.
      */
    public boolean hasBeginIndexable() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'beginIndexable' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearBeginIndexable() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'beginZoneSpecified' field.
      * @return The value.
      */
    public String getBeginZoneSpecified() {
      return beginZoneSpecified;
    }

    /**
      * Sets the value of the 'beginZoneSpecified' field.
      * @param value The value of 'beginZoneSpecified'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setBeginZoneSpecified(String value) {
      validate(fields()[3], value);
      this.beginZoneSpecified = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'beginZoneSpecified' field has been set.
      * @return True if the 'beginZoneSpecified' field has been set, false otherwise.
      */
    public boolean hasBeginZoneSpecified() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'beginZoneSpecified' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearBeginZoneSpecified() {
      beginZoneSpecified = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'beginUtcDateTimeString' field.
      * @return The value.
      */
    public String getBeginUtcDateTimeString() {
      return beginUtcDateTimeString;
    }

    /**
      * Sets the value of the 'beginUtcDateTimeString' field.
      * @param value The value of 'beginUtcDateTimeString'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setBeginUtcDateTimeString(String value) {
      validate(fields()[4], value);
      this.beginUtcDateTimeString = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'beginUtcDateTimeString' field has been set.
      * @return True if the 'beginUtcDateTimeString' field has been set, false otherwise.
      */
    public boolean hasBeginUtcDateTimeString() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'beginUtcDateTimeString' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearBeginUtcDateTimeString() {
      beginUtcDateTimeString = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'endExists' field.
      * @return The value.
      */
    public Boolean getEndExists() {
      return endExists;
    }

    /**
      * Sets the value of the 'endExists' field.
      * @param value The value of 'endExists'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setEndExists(boolean value) {
      validate(fields()[5], value);
      this.endExists = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'endExists' field has been set.
      * @return True if the 'endExists' field has been set, false otherwise.
      */
    public boolean hasEndExists() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'endExists' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearEndExists() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'endPrecision' field.
      * @return The value.
      */
    public String getEndPrecision() {
      return endPrecision;
    }

    /**
      * Sets the value of the 'endPrecision' field.
      * @param value The value of 'endPrecision'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setEndPrecision(String value) {
      validate(fields()[6], value);
      this.endPrecision = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'endPrecision' field has been set.
      * @return True if the 'endPrecision' field has been set, false otherwise.
      */
    public boolean hasEndPrecision() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'endPrecision' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearEndPrecision() {
      endPrecision = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'endIndexable' field.
      * @return The value.
      */
    public Boolean getEndIndexable() {
      return endIndexable;
    }

    /**
      * Sets the value of the 'endIndexable' field.
      * @param value The value of 'endIndexable'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setEndIndexable(boolean value) {
      validate(fields()[7], value);
      this.endIndexable = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'endIndexable' field has been set.
      * @return True if the 'endIndexable' field has been set, false otherwise.
      */
    public boolean hasEndIndexable() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'endIndexable' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearEndIndexable() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'endZoneSpecified' field.
      * @return The value.
      */
    public String getEndZoneSpecified() {
      return endZoneSpecified;
    }

    /**
      * Sets the value of the 'endZoneSpecified' field.
      * @param value The value of 'endZoneSpecified'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setEndZoneSpecified(String value) {
      validate(fields()[8], value);
      this.endZoneSpecified = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'endZoneSpecified' field has been set.
      * @return True if the 'endZoneSpecified' field has been set, false otherwise.
      */
    public boolean hasEndZoneSpecified() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'endZoneSpecified' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearEndZoneSpecified() {
      endZoneSpecified = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'endUtcDateTimeString' field.
      * @return The value.
      */
    public String getEndUtcDateTimeString() {
      return endUtcDateTimeString;
    }

    /**
      * Sets the value of the 'endUtcDateTimeString' field.
      * @param value The value of 'endUtcDateTimeString'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setEndUtcDateTimeString(String value) {
      validate(fields()[9], value);
      this.endUtcDateTimeString = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'endUtcDateTimeString' field has been set.
      * @return True if the 'endUtcDateTimeString' field has been set, false otherwise.
      */
    public boolean hasEndUtcDateTimeString() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'endUtcDateTimeString' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearEndUtcDateTimeString() {
      endUtcDateTimeString = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'instantExists' field.
      * @return The value.
      */
    public Boolean getInstantExists() {
      return instantExists;
    }

    /**
      * Sets the value of the 'instantExists' field.
      * @param value The value of 'instantExists'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setInstantExists(boolean value) {
      validate(fields()[10], value);
      this.instantExists = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'instantExists' field has been set.
      * @return True if the 'instantExists' field has been set, false otherwise.
      */
    public boolean hasInstantExists() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'instantExists' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearInstantExists() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'instantPrecision' field.
      * @return The value.
      */
    public String getInstantPrecision() {
      return instantPrecision;
    }

    /**
      * Sets the value of the 'instantPrecision' field.
      * @param value The value of 'instantPrecision'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setInstantPrecision(String value) {
      validate(fields()[11], value);
      this.instantPrecision = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'instantPrecision' field has been set.
      * @return True if the 'instantPrecision' field has been set, false otherwise.
      */
    public boolean hasInstantPrecision() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'instantPrecision' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearInstantPrecision() {
      instantPrecision = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'instantIndexable' field.
      * @return The value.
      */
    public Boolean getInstantIndexable() {
      return instantIndexable;
    }

    /**
      * Sets the value of the 'instantIndexable' field.
      * @param value The value of 'instantIndexable'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setInstantIndexable(boolean value) {
      validate(fields()[12], value);
      this.instantIndexable = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'instantIndexable' field has been set.
      * @return True if the 'instantIndexable' field has been set, false otherwise.
      */
    public boolean hasInstantIndexable() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'instantIndexable' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearInstantIndexable() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'instantZoneSpecified' field.
      * @return The value.
      */
    public String getInstantZoneSpecified() {
      return instantZoneSpecified;
    }

    /**
      * Sets the value of the 'instantZoneSpecified' field.
      * @param value The value of 'instantZoneSpecified'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setInstantZoneSpecified(String value) {
      validate(fields()[13], value);
      this.instantZoneSpecified = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'instantZoneSpecified' field has been set.
      * @return True if the 'instantZoneSpecified' field has been set, false otherwise.
      */
    public boolean hasInstantZoneSpecified() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'instantZoneSpecified' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearInstantZoneSpecified() {
      instantZoneSpecified = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'instantUtcDateTimeString' field.
      * @return The value.
      */
    public String getInstantUtcDateTimeString() {
      return instantUtcDateTimeString;
    }

    /**
      * Sets the value of the 'instantUtcDateTimeString' field.
      * @param value The value of 'instantUtcDateTimeString'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setInstantUtcDateTimeString(String value) {
      validate(fields()[14], value);
      this.instantUtcDateTimeString = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'instantUtcDateTimeString' field has been set.
      * @return True if the 'instantUtcDateTimeString' field has been set, false otherwise.
      */
    public boolean hasInstantUtcDateTimeString() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'instantUtcDateTimeString' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearInstantUtcDateTimeString() {
      instantUtcDateTimeString = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'rangeDescriptor' field.
      * @return The value.
      */
    public String getRangeDescriptor() {
      return rangeDescriptor;
    }

    /**
      * Sets the value of the 'rangeDescriptor' field.
      * @param value The value of 'rangeDescriptor'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setRangeDescriptor(String value) {
      validate(fields()[15], value);
      this.rangeDescriptor = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'rangeDescriptor' field has been set.
      * @return True if the 'rangeDescriptor' field has been set, false otherwise.
      */
    public boolean hasRangeDescriptor() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'rangeDescriptor' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearRangeDescriptor() {
      rangeDescriptor = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'rangeBeginLTEEnd' field.
      * @return The value.
      */
    public Object getRangeBeginLTEEnd() {
      return rangeBeginLTEEnd;
    }

    /**
      * Sets the value of the 'rangeBeginLTEEnd' field.
      * @param value The value of 'rangeBeginLTEEnd'.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder setRangeBeginLTEEnd(Object value) {
      validate(fields()[16], value);
      this.rangeBeginLTEEnd = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'rangeBeginLTEEnd' field has been set.
      * @return True if the 'rangeBeginLTEEnd' field has been set, false otherwise.
      */
    public boolean hasRangeBeginLTEEnd() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'rangeBeginLTEEnd' field.
      * @return This builder.
      */
    public TemporalBoundingAnalysis.Builder clearRangeBeginLTEEnd() {
      rangeBeginLTEEnd = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    @Override
    public TemporalBoundingAnalysis build() {
      try {
        TemporalBoundingAnalysis record = new TemporalBoundingAnalysis();
        record.beginExists = fieldSetFlags()[0] ? this.beginExists : (Boolean) defaultValue(fields()[0]);
        record.beginPrecision = fieldSetFlags()[1] ? this.beginPrecision : (String) defaultValue(fields()[1]);
        record.beginIndexable = fieldSetFlags()[2] ? this.beginIndexable : (Boolean) defaultValue(fields()[2]);
        record.beginZoneSpecified = fieldSetFlags()[3] ? this.beginZoneSpecified : (String) defaultValue(fields()[3]);
        record.beginUtcDateTimeString = fieldSetFlags()[4] ? this.beginUtcDateTimeString : (String) defaultValue(fields()[4]);
        record.endExists = fieldSetFlags()[5] ? this.endExists : (Boolean) defaultValue(fields()[5]);
        record.endPrecision = fieldSetFlags()[6] ? this.endPrecision : (String) defaultValue(fields()[6]);
        record.endIndexable = fieldSetFlags()[7] ? this.endIndexable : (Boolean) defaultValue(fields()[7]);
        record.endZoneSpecified = fieldSetFlags()[8] ? this.endZoneSpecified : (String) defaultValue(fields()[8]);
        record.endUtcDateTimeString = fieldSetFlags()[9] ? this.endUtcDateTimeString : (String) defaultValue(fields()[9]);
        record.instantExists = fieldSetFlags()[10] ? this.instantExists : (Boolean) defaultValue(fields()[10]);
        record.instantPrecision = fieldSetFlags()[11] ? this.instantPrecision : (String) defaultValue(fields()[11]);
        record.instantIndexable = fieldSetFlags()[12] ? this.instantIndexable : (Boolean) defaultValue(fields()[12]);
        record.instantZoneSpecified = fieldSetFlags()[13] ? this.instantZoneSpecified : (String) defaultValue(fields()[13]);
        record.instantUtcDateTimeString = fieldSetFlags()[14] ? this.instantUtcDateTimeString : (String) defaultValue(fields()[14]);
        record.rangeDescriptor = fieldSetFlags()[15] ? this.rangeDescriptor : (String) defaultValue(fields()[15]);
        record.rangeBeginLTEEnd = fieldSetFlags()[16] ? this.rangeBeginLTEEnd : (Object) defaultValue(fields()[16]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
