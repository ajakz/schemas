/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.psi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class IdentificationAnalysis extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2349215515893558075L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IdentificationAnalysis\",\"namespace\":\"org.cedar.psi.common.avro\",\"fields\":[{\"name\":\"fileIdentifierExists\",\"type\":\"boolean\"},{\"name\":\"fileIdentifierString\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"doiExists\",\"type\":\"boolean\"},{\"name\":\"doiString\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"parentIdentifierExists\",\"type\":\"boolean\"},{\"name\":\"parentIdentifierString\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"hierarchyLevelNameExists\",\"type\":\"boolean\"},{\"name\":\"matchesIdentifiers\",\"type\":\"boolean\",\"doc\":\"Resolves to true if 'granule' specified as hierarchy level and both fileId & parentId provided OR if no hierarchy level specified.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private boolean fileIdentifierExists;
   private String fileIdentifierString;
   private boolean doiExists;
   private String doiString;
   private boolean parentIdentifierExists;
   private String parentIdentifierString;
   private boolean hierarchyLevelNameExists;
  /** Resolves to true if 'granule' specified as hierarchy level and both fileId & parentId provided OR if no hierarchy level specified. */
   private boolean matchesIdentifiers;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public IdentificationAnalysis() {}

  /**
   * All-args constructor.
   * @param fileIdentifierExists The new value for fileIdentifierExists
   * @param fileIdentifierString The new value for fileIdentifierString
   * @param doiExists The new value for doiExists
   * @param doiString The new value for doiString
   * @param parentIdentifierExists The new value for parentIdentifierExists
   * @param parentIdentifierString The new value for parentIdentifierString
   * @param hierarchyLevelNameExists The new value for hierarchyLevelNameExists
   * @param matchesIdentifiers Resolves to true if 'granule' specified as hierarchy level and both fileId & parentId provided OR if no hierarchy level specified.
   */
  public IdentificationAnalysis(Boolean fileIdentifierExists, String fileIdentifierString, Boolean doiExists, String doiString, Boolean parentIdentifierExists, String parentIdentifierString, Boolean hierarchyLevelNameExists, Boolean matchesIdentifiers) {
    this.fileIdentifierExists = fileIdentifierExists;
    this.fileIdentifierString = fileIdentifierString;
    this.doiExists = doiExists;
    this.doiString = doiString;
    this.parentIdentifierExists = parentIdentifierExists;
    this.parentIdentifierString = parentIdentifierString;
    this.hierarchyLevelNameExists = hierarchyLevelNameExists;
    this.matchesIdentifiers = matchesIdentifiers;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return fileIdentifierExists;
    case 1: return fileIdentifierString;
    case 2: return doiExists;
    case 3: return doiString;
    case 4: return parentIdentifierExists;
    case 5: return parentIdentifierString;
    case 6: return hierarchyLevelNameExists;
    case 7: return matchesIdentifiers;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: fileIdentifierExists = (Boolean)value$; break;
    case 1: fileIdentifierString = (String)value$; break;
    case 2: doiExists = (Boolean)value$; break;
    case 3: doiString = (String)value$; break;
    case 4: parentIdentifierExists = (Boolean)value$; break;
    case 5: parentIdentifierString = (String)value$; break;
    case 6: hierarchyLevelNameExists = (Boolean)value$; break;
    case 7: matchesIdentifiers = (Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fileIdentifierExists' field.
   * @return The value of the 'fileIdentifierExists' field.
   */
  public Boolean getFileIdentifierExists() {
    return fileIdentifierExists;
  }


  /**
   * Gets the value of the 'fileIdentifierString' field.
   * @return The value of the 'fileIdentifierString' field.
   */
  public String getFileIdentifierString() {
    return fileIdentifierString;
  }


  /**
   * Gets the value of the 'doiExists' field.
   * @return The value of the 'doiExists' field.
   */
  public Boolean getDoiExists() {
    return doiExists;
  }


  /**
   * Gets the value of the 'doiString' field.
   * @return The value of the 'doiString' field.
   */
  public String getDoiString() {
    return doiString;
  }


  /**
   * Gets the value of the 'parentIdentifierExists' field.
   * @return The value of the 'parentIdentifierExists' field.
   */
  public Boolean getParentIdentifierExists() {
    return parentIdentifierExists;
  }


  /**
   * Gets the value of the 'parentIdentifierString' field.
   * @return The value of the 'parentIdentifierString' field.
   */
  public String getParentIdentifierString() {
    return parentIdentifierString;
  }


  /**
   * Gets the value of the 'hierarchyLevelNameExists' field.
   * @return The value of the 'hierarchyLevelNameExists' field.
   */
  public Boolean getHierarchyLevelNameExists() {
    return hierarchyLevelNameExists;
  }


  /**
   * Gets the value of the 'matchesIdentifiers' field.
   * @return Resolves to true if 'granule' specified as hierarchy level and both fileId & parentId provided OR if no hierarchy level specified.
   */
  public Boolean getMatchesIdentifiers() {
    return matchesIdentifiers;
  }


  /**
   * Creates a new IdentificationAnalysis RecordBuilder.
   * @return A new IdentificationAnalysis RecordBuilder
   */
  public static IdentificationAnalysis.Builder newBuilder() {
    return new IdentificationAnalysis.Builder();
  }

  /**
   * Creates a new IdentificationAnalysis RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new IdentificationAnalysis RecordBuilder
   */
  public static IdentificationAnalysis.Builder newBuilder(IdentificationAnalysis.Builder other) {
    return new IdentificationAnalysis.Builder(other);
  }

  /**
   * Creates a new IdentificationAnalysis RecordBuilder by copying an existing IdentificationAnalysis instance.
   * @param other The existing instance to copy.
   * @return A new IdentificationAnalysis RecordBuilder
   */
  public static IdentificationAnalysis.Builder newBuilder(IdentificationAnalysis other) {
    return new IdentificationAnalysis.Builder(other);
  }

  /**
   * RecordBuilder for IdentificationAnalysis instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IdentificationAnalysis>
    implements org.apache.avro.data.RecordBuilder<IdentificationAnalysis> {

    private boolean fileIdentifierExists;
    private String fileIdentifierString;
    private boolean doiExists;
    private String doiString;
    private boolean parentIdentifierExists;
    private String parentIdentifierString;
    private boolean hierarchyLevelNameExists;
    /** Resolves to true if 'granule' specified as hierarchy level and both fileId & parentId provided OR if no hierarchy level specified. */
    private boolean matchesIdentifiers;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(IdentificationAnalysis.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fileIdentifierExists)) {
        this.fileIdentifierExists = data().deepCopy(fields()[0].schema(), other.fileIdentifierExists);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileIdentifierString)) {
        this.fileIdentifierString = data().deepCopy(fields()[1].schema(), other.fileIdentifierString);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.doiExists)) {
        this.doiExists = data().deepCopy(fields()[2].schema(), other.doiExists);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.doiString)) {
        this.doiString = data().deepCopy(fields()[3].schema(), other.doiString);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.parentIdentifierExists)) {
        this.parentIdentifierExists = data().deepCopy(fields()[4].schema(), other.parentIdentifierExists);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.parentIdentifierString)) {
        this.parentIdentifierString = data().deepCopy(fields()[5].schema(), other.parentIdentifierString);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hierarchyLevelNameExists)) {
        this.hierarchyLevelNameExists = data().deepCopy(fields()[6].schema(), other.hierarchyLevelNameExists);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.matchesIdentifiers)) {
        this.matchesIdentifiers = data().deepCopy(fields()[7].schema(), other.matchesIdentifiers);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing IdentificationAnalysis instance
     * @param other The existing instance to copy.
     */
    private Builder(IdentificationAnalysis other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.fileIdentifierExists)) {
        this.fileIdentifierExists = data().deepCopy(fields()[0].schema(), other.fileIdentifierExists);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileIdentifierString)) {
        this.fileIdentifierString = data().deepCopy(fields()[1].schema(), other.fileIdentifierString);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.doiExists)) {
        this.doiExists = data().deepCopy(fields()[2].schema(), other.doiExists);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.doiString)) {
        this.doiString = data().deepCopy(fields()[3].schema(), other.doiString);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.parentIdentifierExists)) {
        this.parentIdentifierExists = data().deepCopy(fields()[4].schema(), other.parentIdentifierExists);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.parentIdentifierString)) {
        this.parentIdentifierString = data().deepCopy(fields()[5].schema(), other.parentIdentifierString);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hierarchyLevelNameExists)) {
        this.hierarchyLevelNameExists = data().deepCopy(fields()[6].schema(), other.hierarchyLevelNameExists);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.matchesIdentifiers)) {
        this.matchesIdentifiers = data().deepCopy(fields()[7].schema(), other.matchesIdentifiers);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'fileIdentifierExists' field.
      * @return The value.
      */
    public Boolean getFileIdentifierExists() {
      return fileIdentifierExists;
    }

    /**
      * Sets the value of the 'fileIdentifierExists' field.
      * @param value The value of 'fileIdentifierExists'.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder setFileIdentifierExists(boolean value) {
      validate(fields()[0], value);
      this.fileIdentifierExists = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'fileIdentifierExists' field has been set.
      * @return True if the 'fileIdentifierExists' field has been set, false otherwise.
      */
    public boolean hasFileIdentifierExists() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'fileIdentifierExists' field.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder clearFileIdentifierExists() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileIdentifierString' field.
      * @return The value.
      */
    public String getFileIdentifierString() {
      return fileIdentifierString;
    }

    /**
      * Sets the value of the 'fileIdentifierString' field.
      * @param value The value of 'fileIdentifierString'.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder setFileIdentifierString(String value) {
      validate(fields()[1], value);
      this.fileIdentifierString = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fileIdentifierString' field has been set.
      * @return True if the 'fileIdentifierString' field has been set, false otherwise.
      */
    public boolean hasFileIdentifierString() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fileIdentifierString' field.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder clearFileIdentifierString() {
      fileIdentifierString = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'doiExists' field.
      * @return The value.
      */
    public Boolean getDoiExists() {
      return doiExists;
    }

    /**
      * Sets the value of the 'doiExists' field.
      * @param value The value of 'doiExists'.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder setDoiExists(boolean value) {
      validate(fields()[2], value);
      this.doiExists = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'doiExists' field has been set.
      * @return True if the 'doiExists' field has been set, false otherwise.
      */
    public boolean hasDoiExists() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'doiExists' field.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder clearDoiExists() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'doiString' field.
      * @return The value.
      */
    public String getDoiString() {
      return doiString;
    }

    /**
      * Sets the value of the 'doiString' field.
      * @param value The value of 'doiString'.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder setDoiString(String value) {
      validate(fields()[3], value);
      this.doiString = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'doiString' field has been set.
      * @return True if the 'doiString' field has been set, false otherwise.
      */
    public boolean hasDoiString() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'doiString' field.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder clearDoiString() {
      doiString = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentIdentifierExists' field.
      * @return The value.
      */
    public Boolean getParentIdentifierExists() {
      return parentIdentifierExists;
    }

    /**
      * Sets the value of the 'parentIdentifierExists' field.
      * @param value The value of 'parentIdentifierExists'.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder setParentIdentifierExists(boolean value) {
      validate(fields()[4], value);
      this.parentIdentifierExists = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'parentIdentifierExists' field has been set.
      * @return True if the 'parentIdentifierExists' field has been set, false otherwise.
      */
    public boolean hasParentIdentifierExists() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'parentIdentifierExists' field.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder clearParentIdentifierExists() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentIdentifierString' field.
      * @return The value.
      */
    public String getParentIdentifierString() {
      return parentIdentifierString;
    }

    /**
      * Sets the value of the 'parentIdentifierString' field.
      * @param value The value of 'parentIdentifierString'.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder setParentIdentifierString(String value) {
      validate(fields()[5], value);
      this.parentIdentifierString = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'parentIdentifierString' field has been set.
      * @return True if the 'parentIdentifierString' field has been set, false otherwise.
      */
    public boolean hasParentIdentifierString() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'parentIdentifierString' field.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder clearParentIdentifierString() {
      parentIdentifierString = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'hierarchyLevelNameExists' field.
      * @return The value.
      */
    public Boolean getHierarchyLevelNameExists() {
      return hierarchyLevelNameExists;
    }

    /**
      * Sets the value of the 'hierarchyLevelNameExists' field.
      * @param value The value of 'hierarchyLevelNameExists'.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder setHierarchyLevelNameExists(boolean value) {
      validate(fields()[6], value);
      this.hierarchyLevelNameExists = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'hierarchyLevelNameExists' field has been set.
      * @return True if the 'hierarchyLevelNameExists' field has been set, false otherwise.
      */
    public boolean hasHierarchyLevelNameExists() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'hierarchyLevelNameExists' field.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder clearHierarchyLevelNameExists() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'matchesIdentifiers' field.
      * Resolves to true if 'granule' specified as hierarchy level and both fileId & parentId provided OR if no hierarchy level specified.
      * @return The value.
      */
    public Boolean getMatchesIdentifiers() {
      return matchesIdentifiers;
    }

    /**
      * Sets the value of the 'matchesIdentifiers' field.
      * Resolves to true if 'granule' specified as hierarchy level and both fileId & parentId provided OR if no hierarchy level specified.
      * @param value The value of 'matchesIdentifiers'.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder setMatchesIdentifiers(boolean value) {
      validate(fields()[7], value);
      this.matchesIdentifiers = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'matchesIdentifiers' field has been set.
      * Resolves to true if 'granule' specified as hierarchy level and both fileId & parentId provided OR if no hierarchy level specified.
      * @return True if the 'matchesIdentifiers' field has been set, false otherwise.
      */
    public boolean hasMatchesIdentifiers() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'matchesIdentifiers' field.
      * Resolves to true if 'granule' specified as hierarchy level and both fileId & parentId provided OR if no hierarchy level specified.
      * @return This builder.
      */
    public IdentificationAnalysis.Builder clearMatchesIdentifiers() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public IdentificationAnalysis build() {
      try {
        IdentificationAnalysis record = new IdentificationAnalysis();
        record.fileIdentifierExists = fieldSetFlags()[0] ? this.fileIdentifierExists : (Boolean) defaultValue(fields()[0]);
        record.fileIdentifierString = fieldSetFlags()[1] ? this.fileIdentifierString : (String) defaultValue(fields()[1]);
        record.doiExists = fieldSetFlags()[2] ? this.doiExists : (Boolean) defaultValue(fields()[2]);
        record.doiString = fieldSetFlags()[3] ? this.doiString : (String) defaultValue(fields()[3]);
        record.parentIdentifierExists = fieldSetFlags()[4] ? this.parentIdentifierExists : (Boolean) defaultValue(fields()[4]);
        record.parentIdentifierString = fieldSetFlags()[5] ? this.parentIdentifierString : (String) defaultValue(fields()[5]);
        record.hierarchyLevelNameExists = fieldSetFlags()[6] ? this.hierarchyLevelNameExists : (Boolean) defaultValue(fields()[6]);
        record.matchesIdentifiers = fieldSetFlags()[7] ? this.matchesIdentifiers : (Boolean) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
