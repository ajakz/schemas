/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.psi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ResponsibleParty extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4309156597834083490L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ResponsibleParty\",\"namespace\":\"org.cedar.psi.common.avro\",\"fields\":[{\"name\":\"individualName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"organizationName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"positionName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"role\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"email\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"phone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private String individualName;
   private String organizationName;
   private String positionName;
   private String role;
   private String email;
   private String phone;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ResponsibleParty() {}

  /**
   * All-args constructor.
   * @param individualName The new value for individualName
   * @param organizationName The new value for organizationName
   * @param positionName The new value for positionName
   * @param role The new value for role
   * @param email The new value for email
   * @param phone The new value for phone
   */
  public ResponsibleParty(String individualName, String organizationName, String positionName, String role, String email, String phone) {
    this.individualName = individualName;
    this.organizationName = organizationName;
    this.positionName = positionName;
    this.role = role;
    this.email = email;
    this.phone = phone;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return individualName;
    case 1: return organizationName;
    case 2: return positionName;
    case 3: return role;
    case 4: return email;
    case 5: return phone;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: individualName = (String)value$; break;
    case 1: organizationName = (String)value$; break;
    case 2: positionName = (String)value$; break;
    case 3: role = (String)value$; break;
    case 4: email = (String)value$; break;
    case 5: phone = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'individualName' field.
   * @return The value of the 'individualName' field.
   */
  public String getIndividualName() {
    return individualName;
  }


  /**
   * Gets the value of the 'organizationName' field.
   * @return The value of the 'organizationName' field.
   */
  public String getOrganizationName() {
    return organizationName;
  }


  /**
   * Gets the value of the 'positionName' field.
   * @return The value of the 'positionName' field.
   */
  public String getPositionName() {
    return positionName;
  }


  /**
   * Gets the value of the 'role' field.
   * @return The value of the 'role' field.
   */
  public String getRole() {
    return role;
  }


  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public String getEmail() {
    return email;
  }


  /**
   * Gets the value of the 'phone' field.
   * @return The value of the 'phone' field.
   */
  public String getPhone() {
    return phone;
  }


  /**
   * Creates a new ResponsibleParty RecordBuilder.
   * @return A new ResponsibleParty RecordBuilder
   */
  public static ResponsibleParty.Builder newBuilder() {
    return new ResponsibleParty.Builder();
  }

  /**
   * Creates a new ResponsibleParty RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ResponsibleParty RecordBuilder
   */
  public static ResponsibleParty.Builder newBuilder(ResponsibleParty.Builder other) {
    return new ResponsibleParty.Builder(other);
  }

  /**
   * Creates a new ResponsibleParty RecordBuilder by copying an existing ResponsibleParty instance.
   * @param other The existing instance to copy.
   * @return A new ResponsibleParty RecordBuilder
   */
  public static ResponsibleParty.Builder newBuilder(ResponsibleParty other) {
    return new ResponsibleParty.Builder(other);
  }

  /**
   * RecordBuilder for ResponsibleParty instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ResponsibleParty>
    implements org.apache.avro.data.RecordBuilder<ResponsibleParty> {

    private String individualName;
    private String organizationName;
    private String positionName;
    private String role;
    private String email;
    private String phone;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ResponsibleParty.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.individualName)) {
        this.individualName = data().deepCopy(fields()[0].schema(), other.individualName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.organizationName)) {
        this.organizationName = data().deepCopy(fields()[1].schema(), other.organizationName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.positionName)) {
        this.positionName = data().deepCopy(fields()[2].schema(), other.positionName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.role)) {
        this.role = data().deepCopy(fields()[3].schema(), other.role);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.email)) {
        this.email = data().deepCopy(fields()[4].schema(), other.email);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.phone)) {
        this.phone = data().deepCopy(fields()[5].schema(), other.phone);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ResponsibleParty instance
     * @param other The existing instance to copy.
     */
    private Builder(ResponsibleParty other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.individualName)) {
        this.individualName = data().deepCopy(fields()[0].schema(), other.individualName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.organizationName)) {
        this.organizationName = data().deepCopy(fields()[1].schema(), other.organizationName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.positionName)) {
        this.positionName = data().deepCopy(fields()[2].schema(), other.positionName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.role)) {
        this.role = data().deepCopy(fields()[3].schema(), other.role);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.email)) {
        this.email = data().deepCopy(fields()[4].schema(), other.email);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.phone)) {
        this.phone = data().deepCopy(fields()[5].schema(), other.phone);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'individualName' field.
      * @return The value.
      */
    public String getIndividualName() {
      return individualName;
    }

    /**
      * Sets the value of the 'individualName' field.
      * @param value The value of 'individualName'.
      * @return This builder.
      */
    public ResponsibleParty.Builder setIndividualName(String value) {
      validate(fields()[0], value);
      this.individualName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'individualName' field has been set.
      * @return True if the 'individualName' field has been set, false otherwise.
      */
    public boolean hasIndividualName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'individualName' field.
      * @return This builder.
      */
    public ResponsibleParty.Builder clearIndividualName() {
      individualName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'organizationName' field.
      * @return The value.
      */
    public String getOrganizationName() {
      return organizationName;
    }

    /**
      * Sets the value of the 'organizationName' field.
      * @param value The value of 'organizationName'.
      * @return This builder.
      */
    public ResponsibleParty.Builder setOrganizationName(String value) {
      validate(fields()[1], value);
      this.organizationName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'organizationName' field has been set.
      * @return True if the 'organizationName' field has been set, false otherwise.
      */
    public boolean hasOrganizationName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'organizationName' field.
      * @return This builder.
      */
    public ResponsibleParty.Builder clearOrganizationName() {
      organizationName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'positionName' field.
      * @return The value.
      */
    public String getPositionName() {
      return positionName;
    }

    /**
      * Sets the value of the 'positionName' field.
      * @param value The value of 'positionName'.
      * @return This builder.
      */
    public ResponsibleParty.Builder setPositionName(String value) {
      validate(fields()[2], value);
      this.positionName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'positionName' field has been set.
      * @return True if the 'positionName' field has been set, false otherwise.
      */
    public boolean hasPositionName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'positionName' field.
      * @return This builder.
      */
    public ResponsibleParty.Builder clearPositionName() {
      positionName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'role' field.
      * @return The value.
      */
    public String getRole() {
      return role;
    }

    /**
      * Sets the value of the 'role' field.
      * @param value The value of 'role'.
      * @return This builder.
      */
    public ResponsibleParty.Builder setRole(String value) {
      validate(fields()[3], value);
      this.role = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'role' field has been set.
      * @return True if the 'role' field has been set, false otherwise.
      */
    public boolean hasRole() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'role' field.
      * @return This builder.
      */
    public ResponsibleParty.Builder clearRole() {
      role = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public String getEmail() {
      return email;
    }

    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public ResponsibleParty.Builder setEmail(String value) {
      validate(fields()[4], value);
      this.email = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public ResponsibleParty.Builder clearEmail() {
      email = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'phone' field.
      * @return The value.
      */
    public String getPhone() {
      return phone;
    }

    /**
      * Sets the value of the 'phone' field.
      * @param value The value of 'phone'.
      * @return This builder.
      */
    public ResponsibleParty.Builder setPhone(String value) {
      validate(fields()[5], value);
      this.phone = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'phone' field has been set.
      * @return True if the 'phone' field has been set, false otherwise.
      */
    public boolean hasPhone() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'phone' field.
      * @return This builder.
      */
    public ResponsibleParty.Builder clearPhone() {
      phone = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public ResponsibleParty build() {
      try {
        ResponsibleParty record = new ResponsibleParty();
        record.individualName = fieldSetFlags()[0] ? this.individualName : (String) defaultValue(fields()[0]);
        record.organizationName = fieldSetFlags()[1] ? this.organizationName : (String) defaultValue(fields()[1]);
        record.positionName = fieldSetFlags()[2] ? this.positionName : (String) defaultValue(fields()[2]);
        record.role = fieldSetFlags()[3] ? this.role : (String) defaultValue(fields()[3]);
        record.email = fieldSetFlags()[4] ? this.email : (String) defaultValue(fields()[4]);
        record.phone = fieldSetFlags()[5] ? this.phone : (String) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
