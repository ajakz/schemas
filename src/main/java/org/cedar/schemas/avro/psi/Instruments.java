/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.psi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Instruments extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7304777187749232151L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Instruments\",\"namespace\":\"org.cedar.psi.common.avro\",\"fields\":[{\"name\":\"instrumentIdentifier\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"instrumentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"instrumentDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private String instrumentIdentifier;
   private String instrumentType;
   private String instrumentDescription;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Instruments() {}

  /**
   * All-args constructor.
   * @param instrumentIdentifier The new value for instrumentIdentifier
   * @param instrumentType The new value for instrumentType
   * @param instrumentDescription The new value for instrumentDescription
   */
  public Instruments(String instrumentIdentifier, String instrumentType, String instrumentDescription) {
    this.instrumentIdentifier = instrumentIdentifier;
    this.instrumentType = instrumentType;
    this.instrumentDescription = instrumentDescription;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return instrumentIdentifier;
    case 1: return instrumentType;
    case 2: return instrumentDescription;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: instrumentIdentifier = (String)value$; break;
    case 1: instrumentType = (String)value$; break;
    case 2: instrumentDescription = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'instrumentIdentifier' field.
   * @return The value of the 'instrumentIdentifier' field.
   */
  public String getInstrumentIdentifier() {
    return instrumentIdentifier;
  }


  /**
   * Gets the value of the 'instrumentType' field.
   * @return The value of the 'instrumentType' field.
   */
  public String getInstrumentType() {
    return instrumentType;
  }


  /**
   * Gets the value of the 'instrumentDescription' field.
   * @return The value of the 'instrumentDescription' field.
   */
  public String getInstrumentDescription() {
    return instrumentDescription;
  }


  /**
   * Creates a new Instruments RecordBuilder.
   * @return A new Instruments RecordBuilder
   */
  public static Instruments.Builder newBuilder() {
    return new Instruments.Builder();
  }

  /**
   * Creates a new Instruments RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Instruments RecordBuilder
   */
  public static Instruments.Builder newBuilder(Instruments.Builder other) {
    return new Instruments.Builder(other);
  }

  /**
   * Creates a new Instruments RecordBuilder by copying an existing Instruments instance.
   * @param other The existing instance to copy.
   * @return A new Instruments RecordBuilder
   */
  public static Instruments.Builder newBuilder(Instruments other) {
    return new Instruments.Builder(other);
  }

  /**
   * RecordBuilder for Instruments instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Instruments>
    implements org.apache.avro.data.RecordBuilder<Instruments> {

    private String instrumentIdentifier;
    private String instrumentType;
    private String instrumentDescription;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Instruments.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.instrumentIdentifier)) {
        this.instrumentIdentifier = data().deepCopy(fields()[0].schema(), other.instrumentIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.instrumentType)) {
        this.instrumentType = data().deepCopy(fields()[1].schema(), other.instrumentType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.instrumentDescription)) {
        this.instrumentDescription = data().deepCopy(fields()[2].schema(), other.instrumentDescription);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Instruments instance
     * @param other The existing instance to copy.
     */
    private Builder(Instruments other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.instrumentIdentifier)) {
        this.instrumentIdentifier = data().deepCopy(fields()[0].schema(), other.instrumentIdentifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.instrumentType)) {
        this.instrumentType = data().deepCopy(fields()[1].schema(), other.instrumentType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.instrumentDescription)) {
        this.instrumentDescription = data().deepCopy(fields()[2].schema(), other.instrumentDescription);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'instrumentIdentifier' field.
      * @return The value.
      */
    public String getInstrumentIdentifier() {
      return instrumentIdentifier;
    }

    /**
      * Sets the value of the 'instrumentIdentifier' field.
      * @param value The value of 'instrumentIdentifier'.
      * @return This builder.
      */
    public Instruments.Builder setInstrumentIdentifier(String value) {
      validate(fields()[0], value);
      this.instrumentIdentifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentIdentifier' field has been set.
      * @return True if the 'instrumentIdentifier' field has been set, false otherwise.
      */
    public boolean hasInstrumentIdentifier() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'instrumentIdentifier' field.
      * @return This builder.
      */
    public Instruments.Builder clearInstrumentIdentifier() {
      instrumentIdentifier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentType' field.
      * @return The value.
      */
    public String getInstrumentType() {
      return instrumentType;
    }

    /**
      * Sets the value of the 'instrumentType' field.
      * @param value The value of 'instrumentType'.
      * @return This builder.
      */
    public Instruments.Builder setInstrumentType(String value) {
      validate(fields()[1], value);
      this.instrumentType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentType' field has been set.
      * @return True if the 'instrumentType' field has been set, false otherwise.
      */
    public boolean hasInstrumentType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'instrumentType' field.
      * @return This builder.
      */
    public Instruments.Builder clearInstrumentType() {
      instrumentType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentDescription' field.
      * @return The value.
      */
    public String getInstrumentDescription() {
      return instrumentDescription;
    }

    /**
      * Sets the value of the 'instrumentDescription' field.
      * @param value The value of 'instrumentDescription'.
      * @return This builder.
      */
    public Instruments.Builder setInstrumentDescription(String value) {
      validate(fields()[2], value);
      this.instrumentDescription = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentDescription' field has been set.
      * @return True if the 'instrumentDescription' field has been set, false otherwise.
      */
    public boolean hasInstrumentDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'instrumentDescription' field.
      * @return This builder.
      */
    public Instruments.Builder clearInstrumentDescription() {
      instrumentDescription = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Instruments build() {
      try {
        Instruments record = new Instruments();
        record.instrumentIdentifier = fieldSetFlags()[0] ? this.instrumentIdentifier : (String) defaultValue(fields()[0]);
        record.instrumentType = fieldSetFlags()[1] ? this.instrumentType : (String) defaultValue(fields()[1]);
        record.instrumentDescription = fieldSetFlags()[2] ? this.instrumentDescription : (String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
