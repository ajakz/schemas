/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.psi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Operation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1797775799354838555L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Operation\",\"namespace\":\"org.cedar.psi.common.avro\",\"fields\":[{\"name\":\"operationDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"operationIdentifier\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"operationStatus\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"operationType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private String operationDescription;
   private String operationIdentifier;
   private String operationStatus;
   private String operationType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Operation() {}

  /**
   * All-args constructor.
   * @param operationDescription The new value for operationDescription
   * @param operationIdentifier The new value for operationIdentifier
   * @param operationStatus The new value for operationStatus
   * @param operationType The new value for operationType
   */
  public Operation(String operationDescription, String operationIdentifier, String operationStatus, String operationType) {
    this.operationDescription = operationDescription;
    this.operationIdentifier = operationIdentifier;
    this.operationStatus = operationStatus;
    this.operationType = operationType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return operationDescription;
    case 1: return operationIdentifier;
    case 2: return operationStatus;
    case 3: return operationType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: operationDescription = (String)value$; break;
    case 1: operationIdentifier = (String)value$; break;
    case 2: operationStatus = (String)value$; break;
    case 3: operationType = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'operationDescription' field.
   * @return The value of the 'operationDescription' field.
   */
  public String getOperationDescription() {
    return operationDescription;
  }


  /**
   * Gets the value of the 'operationIdentifier' field.
   * @return The value of the 'operationIdentifier' field.
   */
  public String getOperationIdentifier() {
    return operationIdentifier;
  }


  /**
   * Gets the value of the 'operationStatus' field.
   * @return The value of the 'operationStatus' field.
   */
  public String getOperationStatus() {
    return operationStatus;
  }


  /**
   * Gets the value of the 'operationType' field.
   * @return The value of the 'operationType' field.
   */
  public String getOperationType() {
    return operationType;
  }


  /**
   * Creates a new Operation RecordBuilder.
   * @return A new Operation RecordBuilder
   */
  public static Operation.Builder newBuilder() {
    return new Operation.Builder();
  }

  /**
   * Creates a new Operation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Operation RecordBuilder
   */
  public static Operation.Builder newBuilder(Operation.Builder other) {
    return new Operation.Builder(other);
  }

  /**
   * Creates a new Operation RecordBuilder by copying an existing Operation instance.
   * @param other The existing instance to copy.
   * @return A new Operation RecordBuilder
   */
  public static Operation.Builder newBuilder(Operation other) {
    return new Operation.Builder(other);
  }

  /**
   * RecordBuilder for Operation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Operation>
    implements org.apache.avro.data.RecordBuilder<Operation> {

    private String operationDescription;
    private String operationIdentifier;
    private String operationStatus;
    private String operationType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Operation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.operationDescription)) {
        this.operationDescription = data().deepCopy(fields()[0].schema(), other.operationDescription);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.operationIdentifier)) {
        this.operationIdentifier = data().deepCopy(fields()[1].schema(), other.operationIdentifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.operationStatus)) {
        this.operationStatus = data().deepCopy(fields()[2].schema(), other.operationStatus);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.operationType)) {
        this.operationType = data().deepCopy(fields()[3].schema(), other.operationType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Operation instance
     * @param other The existing instance to copy.
     */
    private Builder(Operation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.operationDescription)) {
        this.operationDescription = data().deepCopy(fields()[0].schema(), other.operationDescription);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.operationIdentifier)) {
        this.operationIdentifier = data().deepCopy(fields()[1].schema(), other.operationIdentifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.operationStatus)) {
        this.operationStatus = data().deepCopy(fields()[2].schema(), other.operationStatus);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.operationType)) {
        this.operationType = data().deepCopy(fields()[3].schema(), other.operationType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'operationDescription' field.
      * @return The value.
      */
    public String getOperationDescription() {
      return operationDescription;
    }

    /**
      * Sets the value of the 'operationDescription' field.
      * @param value The value of 'operationDescription'.
      * @return This builder.
      */
    public Operation.Builder setOperationDescription(String value) {
      validate(fields()[0], value);
      this.operationDescription = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'operationDescription' field has been set.
      * @return True if the 'operationDescription' field has been set, false otherwise.
      */
    public boolean hasOperationDescription() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'operationDescription' field.
      * @return This builder.
      */
    public Operation.Builder clearOperationDescription() {
      operationDescription = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'operationIdentifier' field.
      * @return The value.
      */
    public String getOperationIdentifier() {
      return operationIdentifier;
    }

    /**
      * Sets the value of the 'operationIdentifier' field.
      * @param value The value of 'operationIdentifier'.
      * @return This builder.
      */
    public Operation.Builder setOperationIdentifier(String value) {
      validate(fields()[1], value);
      this.operationIdentifier = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'operationIdentifier' field has been set.
      * @return True if the 'operationIdentifier' field has been set, false otherwise.
      */
    public boolean hasOperationIdentifier() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'operationIdentifier' field.
      * @return This builder.
      */
    public Operation.Builder clearOperationIdentifier() {
      operationIdentifier = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'operationStatus' field.
      * @return The value.
      */
    public String getOperationStatus() {
      return operationStatus;
    }

    /**
      * Sets the value of the 'operationStatus' field.
      * @param value The value of 'operationStatus'.
      * @return This builder.
      */
    public Operation.Builder setOperationStatus(String value) {
      validate(fields()[2], value);
      this.operationStatus = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'operationStatus' field has been set.
      * @return True if the 'operationStatus' field has been set, false otherwise.
      */
    public boolean hasOperationStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'operationStatus' field.
      * @return This builder.
      */
    public Operation.Builder clearOperationStatus() {
      operationStatus = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'operationType' field.
      * @return The value.
      */
    public String getOperationType() {
      return operationType;
    }

    /**
      * Sets the value of the 'operationType' field.
      * @param value The value of 'operationType'.
      * @return This builder.
      */
    public Operation.Builder setOperationType(String value) {
      validate(fields()[3], value);
      this.operationType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'operationType' field has been set.
      * @return True if the 'operationType' field has been set, false otherwise.
      */
    public boolean hasOperationType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'operationType' field.
      * @return This builder.
      */
    public Operation.Builder clearOperationType() {
      operationType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Operation build() {
      try {
        Operation record = new Operation();
        record.operationDescription = fieldSetFlags()[0] ? this.operationDescription : (String) defaultValue(fields()[0]);
        record.operationIdentifier = fieldSetFlags()[1] ? this.operationIdentifier : (String) defaultValue(fields()[1]);
        record.operationStatus = fieldSetFlags()[2] ? this.operationStatus : (String) defaultValue(fields()[2]);
        record.operationType = fieldSetFlags()[3] ? this.operationType : (String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
