/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.psi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DescriptionAnalysis extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6490580758679201298L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DescriptionAnalysis\",\"namespace\":\"org.cedar.psi.common.avro\",\"fields\":[{\"name\":\"descriptionExists\",\"type\":\"boolean\"},{\"name\":\"descriptionCharacters\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private boolean descriptionExists;
   private int descriptionCharacters;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DescriptionAnalysis() {}

  /**
   * All-args constructor.
   * @param descriptionExists The new value for descriptionExists
   * @param descriptionCharacters The new value for descriptionCharacters
   */
  public DescriptionAnalysis(Boolean descriptionExists, Integer descriptionCharacters) {
    this.descriptionExists = descriptionExists;
    this.descriptionCharacters = descriptionCharacters;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return descriptionExists;
    case 1: return descriptionCharacters;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: descriptionExists = (Boolean)value$; break;
    case 1: descriptionCharacters = (Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'descriptionExists' field.
   * @return The value of the 'descriptionExists' field.
   */
  public Boolean getDescriptionExists() {
    return descriptionExists;
  }


  /**
   * Gets the value of the 'descriptionCharacters' field.
   * @return The value of the 'descriptionCharacters' field.
   */
  public Integer getDescriptionCharacters() {
    return descriptionCharacters;
  }


  /**
   * Creates a new DescriptionAnalysis RecordBuilder.
   * @return A new DescriptionAnalysis RecordBuilder
   */
  public static DescriptionAnalysis.Builder newBuilder() {
    return new DescriptionAnalysis.Builder();
  }

  /**
   * Creates a new DescriptionAnalysis RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DescriptionAnalysis RecordBuilder
   */
  public static DescriptionAnalysis.Builder newBuilder(DescriptionAnalysis.Builder other) {
    return new DescriptionAnalysis.Builder(other);
  }

  /**
   * Creates a new DescriptionAnalysis RecordBuilder by copying an existing DescriptionAnalysis instance.
   * @param other The existing instance to copy.
   * @return A new DescriptionAnalysis RecordBuilder
   */
  public static DescriptionAnalysis.Builder newBuilder(DescriptionAnalysis other) {
    return new DescriptionAnalysis.Builder(other);
  }

  /**
   * RecordBuilder for DescriptionAnalysis instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DescriptionAnalysis>
    implements org.apache.avro.data.RecordBuilder<DescriptionAnalysis> {

    private boolean descriptionExists;
    private int descriptionCharacters;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(DescriptionAnalysis.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.descriptionExists)) {
        this.descriptionExists = data().deepCopy(fields()[0].schema(), other.descriptionExists);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.descriptionCharacters)) {
        this.descriptionCharacters = data().deepCopy(fields()[1].schema(), other.descriptionCharacters);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DescriptionAnalysis instance
     * @param other The existing instance to copy.
     */
    private Builder(DescriptionAnalysis other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.descriptionExists)) {
        this.descriptionExists = data().deepCopy(fields()[0].schema(), other.descriptionExists);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.descriptionCharacters)) {
        this.descriptionCharacters = data().deepCopy(fields()[1].schema(), other.descriptionCharacters);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'descriptionExists' field.
      * @return The value.
      */
    public Boolean getDescriptionExists() {
      return descriptionExists;
    }

    /**
      * Sets the value of the 'descriptionExists' field.
      * @param value The value of 'descriptionExists'.
      * @return This builder.
      */
    public DescriptionAnalysis.Builder setDescriptionExists(boolean value) {
      validate(fields()[0], value);
      this.descriptionExists = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'descriptionExists' field has been set.
      * @return True if the 'descriptionExists' field has been set, false otherwise.
      */
    public boolean hasDescriptionExists() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'descriptionExists' field.
      * @return This builder.
      */
    public DescriptionAnalysis.Builder clearDescriptionExists() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'descriptionCharacters' field.
      * @return The value.
      */
    public Integer getDescriptionCharacters() {
      return descriptionCharacters;
    }

    /**
      * Sets the value of the 'descriptionCharacters' field.
      * @param value The value of 'descriptionCharacters'.
      * @return This builder.
      */
    public DescriptionAnalysis.Builder setDescriptionCharacters(int value) {
      validate(fields()[1], value);
      this.descriptionCharacters = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'descriptionCharacters' field has been set.
      * @return True if the 'descriptionCharacters' field has been set, false otherwise.
      */
    public boolean hasDescriptionCharacters() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'descriptionCharacters' field.
      * @return This builder.
      */
    public DescriptionAnalysis.Builder clearDescriptionCharacters() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public DescriptionAnalysis build() {
      try {
        DescriptionAnalysis record = new DescriptionAnalysis();
        record.descriptionExists = fieldSetFlags()[0] ? this.descriptionExists : (Boolean) defaultValue(fields()[0]);
        record.descriptionCharacters = fieldSetFlags()[1] ? this.descriptionCharacters : (Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
