/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.psi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TitleAnalysis extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2709600913247677498L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TitleAnalysis\",\"namespace\":\"org.cedar.psi.common.avro\",\"fields\":[{\"name\":\"titleExists\",\"type\":\"boolean\"},{\"name\":\"titleCharacters\",\"type\":\"int\"},{\"name\":\"alternateTitleExists\",\"type\":\"boolean\"},{\"name\":\"alternateTitleCharacters\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private boolean titleExists;
   private int titleCharacters;
   private boolean alternateTitleExists;
   private int alternateTitleCharacters;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TitleAnalysis() {}

  /**
   * All-args constructor.
   * @param titleExists The new value for titleExists
   * @param titleCharacters The new value for titleCharacters
   * @param alternateTitleExists The new value for alternateTitleExists
   * @param alternateTitleCharacters The new value for alternateTitleCharacters
   */
  public TitleAnalysis(Boolean titleExists, Integer titleCharacters, Boolean alternateTitleExists, Integer alternateTitleCharacters) {
    this.titleExists = titleExists;
    this.titleCharacters = titleCharacters;
    this.alternateTitleExists = alternateTitleExists;
    this.alternateTitleCharacters = alternateTitleCharacters;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return titleExists;
    case 1: return titleCharacters;
    case 2: return alternateTitleExists;
    case 3: return alternateTitleCharacters;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: titleExists = (Boolean)value$; break;
    case 1: titleCharacters = (Integer)value$; break;
    case 2: alternateTitleExists = (Boolean)value$; break;
    case 3: alternateTitleCharacters = (Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'titleExists' field.
   * @return The value of the 'titleExists' field.
   */
  public Boolean getTitleExists() {
    return titleExists;
  }


  /**
   * Gets the value of the 'titleCharacters' field.
   * @return The value of the 'titleCharacters' field.
   */
  public Integer getTitleCharacters() {
    return titleCharacters;
  }


  /**
   * Gets the value of the 'alternateTitleExists' field.
   * @return The value of the 'alternateTitleExists' field.
   */
  public Boolean getAlternateTitleExists() {
    return alternateTitleExists;
  }


  /**
   * Gets the value of the 'alternateTitleCharacters' field.
   * @return The value of the 'alternateTitleCharacters' field.
   */
  public Integer getAlternateTitleCharacters() {
    return alternateTitleCharacters;
  }


  /**
   * Creates a new TitleAnalysis RecordBuilder.
   * @return A new TitleAnalysis RecordBuilder
   */
  public static TitleAnalysis.Builder newBuilder() {
    return new TitleAnalysis.Builder();
  }

  /**
   * Creates a new TitleAnalysis RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TitleAnalysis RecordBuilder
   */
  public static TitleAnalysis.Builder newBuilder(TitleAnalysis.Builder other) {
    return new TitleAnalysis.Builder(other);
  }

  /**
   * Creates a new TitleAnalysis RecordBuilder by copying an existing TitleAnalysis instance.
   * @param other The existing instance to copy.
   * @return A new TitleAnalysis RecordBuilder
   */
  public static TitleAnalysis.Builder newBuilder(TitleAnalysis other) {
    return new TitleAnalysis.Builder(other);
  }

  /**
   * RecordBuilder for TitleAnalysis instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TitleAnalysis>
    implements org.apache.avro.data.RecordBuilder<TitleAnalysis> {

    private boolean titleExists;
    private int titleCharacters;
    private boolean alternateTitleExists;
    private int alternateTitleCharacters;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(TitleAnalysis.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.titleExists)) {
        this.titleExists = data().deepCopy(fields()[0].schema(), other.titleExists);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.titleCharacters)) {
        this.titleCharacters = data().deepCopy(fields()[1].schema(), other.titleCharacters);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.alternateTitleExists)) {
        this.alternateTitleExists = data().deepCopy(fields()[2].schema(), other.alternateTitleExists);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.alternateTitleCharacters)) {
        this.alternateTitleCharacters = data().deepCopy(fields()[3].schema(), other.alternateTitleCharacters);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TitleAnalysis instance
     * @param other The existing instance to copy.
     */
    private Builder(TitleAnalysis other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.titleExists)) {
        this.titleExists = data().deepCopy(fields()[0].schema(), other.titleExists);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.titleCharacters)) {
        this.titleCharacters = data().deepCopy(fields()[1].schema(), other.titleCharacters);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.alternateTitleExists)) {
        this.alternateTitleExists = data().deepCopy(fields()[2].schema(), other.alternateTitleExists);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.alternateTitleCharacters)) {
        this.alternateTitleCharacters = data().deepCopy(fields()[3].schema(), other.alternateTitleCharacters);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'titleExists' field.
      * @return The value.
      */
    public Boolean getTitleExists() {
      return titleExists;
    }

    /**
      * Sets the value of the 'titleExists' field.
      * @param value The value of 'titleExists'.
      * @return This builder.
      */
    public TitleAnalysis.Builder setTitleExists(boolean value) {
      validate(fields()[0], value);
      this.titleExists = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'titleExists' field has been set.
      * @return True if the 'titleExists' field has been set, false otherwise.
      */
    public boolean hasTitleExists() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'titleExists' field.
      * @return This builder.
      */
    public TitleAnalysis.Builder clearTitleExists() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'titleCharacters' field.
      * @return The value.
      */
    public Integer getTitleCharacters() {
      return titleCharacters;
    }

    /**
      * Sets the value of the 'titleCharacters' field.
      * @param value The value of 'titleCharacters'.
      * @return This builder.
      */
    public TitleAnalysis.Builder setTitleCharacters(int value) {
      validate(fields()[1], value);
      this.titleCharacters = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'titleCharacters' field has been set.
      * @return True if the 'titleCharacters' field has been set, false otherwise.
      */
    public boolean hasTitleCharacters() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'titleCharacters' field.
      * @return This builder.
      */
    public TitleAnalysis.Builder clearTitleCharacters() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'alternateTitleExists' field.
      * @return The value.
      */
    public Boolean getAlternateTitleExists() {
      return alternateTitleExists;
    }

    /**
      * Sets the value of the 'alternateTitleExists' field.
      * @param value The value of 'alternateTitleExists'.
      * @return This builder.
      */
    public TitleAnalysis.Builder setAlternateTitleExists(boolean value) {
      validate(fields()[2], value);
      this.alternateTitleExists = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'alternateTitleExists' field has been set.
      * @return True if the 'alternateTitleExists' field has been set, false otherwise.
      */
    public boolean hasAlternateTitleExists() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'alternateTitleExists' field.
      * @return This builder.
      */
    public TitleAnalysis.Builder clearAlternateTitleExists() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'alternateTitleCharacters' field.
      * @return The value.
      */
    public Integer getAlternateTitleCharacters() {
      return alternateTitleCharacters;
    }

    /**
      * Sets the value of the 'alternateTitleCharacters' field.
      * @param value The value of 'alternateTitleCharacters'.
      * @return This builder.
      */
    public TitleAnalysis.Builder setAlternateTitleCharacters(int value) {
      validate(fields()[3], value);
      this.alternateTitleCharacters = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'alternateTitleCharacters' field has been set.
      * @return True if the 'alternateTitleCharacters' field has been set, false otherwise.
      */
    public boolean hasAlternateTitleCharacters() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'alternateTitleCharacters' field.
      * @return This builder.
      */
    public TitleAnalysis.Builder clearAlternateTitleCharacters() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public TitleAnalysis build() {
      try {
        TitleAnalysis record = new TitleAnalysis();
        record.titleExists = fieldSetFlags()[0] ? this.titleExists : (Boolean) defaultValue(fields()[0]);
        record.titleCharacters = fieldSetFlags()[1] ? this.titleCharacters : (Integer) defaultValue(fields()[1]);
        record.alternateTitleExists = fieldSetFlags()[2] ? this.alternateTitleExists : (Boolean) defaultValue(fields()[2]);
        record.alternateTitleCharacters = fieldSetFlags()[3] ? this.alternateTitleCharacters : (Integer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
