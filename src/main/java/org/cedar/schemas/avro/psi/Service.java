/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.psi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Service extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2879305365003952357L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Service\",\"namespace\":\"org.cedar.psi.common.avro\",\"fields\":[{\"name\":\"title\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"alternateTitle\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"date\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"dateType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"pointOfContact\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ResponsibleParty\",\"fields\":[{\"name\":\"individualName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"organizationName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"positionName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"role\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"email\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"phone\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"operations\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Link\",\"fields\":[{\"name\":\"linkName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkProtocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkFunction\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private String title;
   private String alternateTitle;
   private String description;
   private String date;
   private String dateType;
   private ResponsibleParty pointOfContact;
   private java.util.List<Link> operations;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Service() {}

  /**
   * All-args constructor.
   * @param title The new value for title
   * @param alternateTitle The new value for alternateTitle
   * @param description The new value for description
   * @param date The new value for date
   * @param dateType The new value for dateType
   * @param pointOfContact The new value for pointOfContact
   * @param operations The new value for operations
   */
  public Service(String title, String alternateTitle, String description, String date, String dateType, ResponsibleParty pointOfContact, java.util.List<Link> operations) {
    this.title = title;
    this.alternateTitle = alternateTitle;
    this.description = description;
    this.date = date;
    this.dateType = dateType;
    this.pointOfContact = pointOfContact;
    this.operations = operations;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return title;
    case 1: return alternateTitle;
    case 2: return description;
    case 3: return date;
    case 4: return dateType;
    case 5: return pointOfContact;
    case 6: return operations;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: title = (String)value$; break;
    case 1: alternateTitle = (String)value$; break;
    case 2: description = (String)value$; break;
    case 3: date = (String)value$; break;
    case 4: dateType = (String)value$; break;
    case 5: pointOfContact = (ResponsibleParty)value$; break;
    case 6: operations = (java.util.List<Link>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public String getTitle() {
    return title;
  }


  /**
   * Gets the value of the 'alternateTitle' field.
   * @return The value of the 'alternateTitle' field.
   */
  public String getAlternateTitle() {
    return alternateTitle;
  }


  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public String getDescription() {
    return description;
  }


  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public String getDate() {
    return date;
  }


  /**
   * Gets the value of the 'dateType' field.
   * @return The value of the 'dateType' field.
   */
  public String getDateType() {
    return dateType;
  }


  /**
   * Gets the value of the 'pointOfContact' field.
   * @return The value of the 'pointOfContact' field.
   */
  public ResponsibleParty getPointOfContact() {
    return pointOfContact;
  }


  /**
   * Gets the value of the 'operations' field.
   * @return The value of the 'operations' field.
   */
  public java.util.List<Link> getOperations() {
    return operations;
  }


  /**
   * Creates a new Service RecordBuilder.
   * @return A new Service RecordBuilder
   */
  public static Service.Builder newBuilder() {
    return new Service.Builder();
  }

  /**
   * Creates a new Service RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Service RecordBuilder
   */
  public static Service.Builder newBuilder(Service.Builder other) {
    return new Service.Builder(other);
  }

  /**
   * Creates a new Service RecordBuilder by copying an existing Service instance.
   * @param other The existing instance to copy.
   * @return A new Service RecordBuilder
   */
  public static Service.Builder newBuilder(Service other) {
    return new Service.Builder(other);
  }

  /**
   * RecordBuilder for Service instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Service>
    implements org.apache.avro.data.RecordBuilder<Service> {

    private String title;
    private String alternateTitle;
    private String description;
    private String date;
    private String dateType;
    private ResponsibleParty pointOfContact;
    private ResponsibleParty.Builder pointOfContactBuilder;
    private java.util.List<Link> operations;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Service.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.alternateTitle)) {
        this.alternateTitle = data().deepCopy(fields()[1].schema(), other.alternateTitle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.date)) {
        this.date = data().deepCopy(fields()[3].schema(), other.date);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dateType)) {
        this.dateType = data().deepCopy(fields()[4].schema(), other.dateType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.pointOfContact)) {
        this.pointOfContact = data().deepCopy(fields()[5].schema(), other.pointOfContact);
        fieldSetFlags()[5] = true;
      }
      if (other.hasPointOfContactBuilder()) {
        this.pointOfContactBuilder = ResponsibleParty.newBuilder(other.getPointOfContactBuilder());
      }
      if (isValidValue(fields()[6], other.operations)) {
        this.operations = data().deepCopy(fields()[6].schema(), other.operations);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Service instance
     * @param other The existing instance to copy.
     */
    private Builder(Service other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.alternateTitle)) {
        this.alternateTitle = data().deepCopy(fields()[1].schema(), other.alternateTitle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.date)) {
        this.date = data().deepCopy(fields()[3].schema(), other.date);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dateType)) {
        this.dateType = data().deepCopy(fields()[4].schema(), other.dateType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.pointOfContact)) {
        this.pointOfContact = data().deepCopy(fields()[5].schema(), other.pointOfContact);
        fieldSetFlags()[5] = true;
      }
      this.pointOfContactBuilder = null;
      if (isValidValue(fields()[6], other.operations)) {
        this.operations = data().deepCopy(fields()[6].schema(), other.operations);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public String getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public Service.Builder setTitle(String value) {
      validate(fields()[0], value);
      this.title = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public Service.Builder clearTitle() {
      title = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'alternateTitle' field.
      * @return The value.
      */
    public String getAlternateTitle() {
      return alternateTitle;
    }

    /**
      * Sets the value of the 'alternateTitle' field.
      * @param value The value of 'alternateTitle'.
      * @return This builder.
      */
    public Service.Builder setAlternateTitle(String value) {
      validate(fields()[1], value);
      this.alternateTitle = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'alternateTitle' field has been set.
      * @return True if the 'alternateTitle' field has been set, false otherwise.
      */
    public boolean hasAlternateTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'alternateTitle' field.
      * @return This builder.
      */
    public Service.Builder clearAlternateTitle() {
      alternateTitle = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public Service.Builder setDescription(String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public Service.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public String getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public Service.Builder setDate(String value) {
      validate(fields()[3], value);
      this.date = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public Service.Builder clearDate() {
      date = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateType' field.
      * @return The value.
      */
    public String getDateType() {
      return dateType;
    }

    /**
      * Sets the value of the 'dateType' field.
      * @param value The value of 'dateType'.
      * @return This builder.
      */
    public Service.Builder setDateType(String value) {
      validate(fields()[4], value);
      this.dateType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dateType' field has been set.
      * @return True if the 'dateType' field has been set, false otherwise.
      */
    public boolean hasDateType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'dateType' field.
      * @return This builder.
      */
    public Service.Builder clearDateType() {
      dateType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'pointOfContact' field.
      * @return The value.
      */
    public ResponsibleParty getPointOfContact() {
      return pointOfContact;
    }

    /**
      * Sets the value of the 'pointOfContact' field.
      * @param value The value of 'pointOfContact'.
      * @return This builder.
      */
    public Service.Builder setPointOfContact(ResponsibleParty value) {
      validate(fields()[5], value);
      this.pointOfContactBuilder = null;
      this.pointOfContact = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'pointOfContact' field has been set.
      * @return True if the 'pointOfContact' field has been set, false otherwise.
      */
    public boolean hasPointOfContact() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'pointOfContact' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public ResponsibleParty.Builder getPointOfContactBuilder() {
      if (pointOfContactBuilder == null) {
        if (hasPointOfContact()) {
          setPointOfContactBuilder(ResponsibleParty.newBuilder(pointOfContact));
        } else {
          setPointOfContactBuilder(ResponsibleParty.newBuilder());
        }
      }
      return pointOfContactBuilder;
    }

    /**
     * Sets the Builder instance for the 'pointOfContact' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Service.Builder setPointOfContactBuilder(ResponsibleParty.Builder value) {
      clearPointOfContact();
      pointOfContactBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'pointOfContact' field has an active Builder instance
     * @return True if the 'pointOfContact' field has an active Builder instance
     */
    public boolean hasPointOfContactBuilder() {
      return pointOfContactBuilder != null;
    }

    /**
      * Clears the value of the 'pointOfContact' field.
      * @return This builder.
      */
    public Service.Builder clearPointOfContact() {
      pointOfContact = null;
      pointOfContactBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'operations' field.
      * @return The value.
      */
    public java.util.List<Link> getOperations() {
      return operations;
    }

    /**
      * Sets the value of the 'operations' field.
      * @param value The value of 'operations'.
      * @return This builder.
      */
    public Service.Builder setOperations(java.util.List<Link> value) {
      validate(fields()[6], value);
      this.operations = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'operations' field has been set.
      * @return True if the 'operations' field has been set, false otherwise.
      */
    public boolean hasOperations() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'operations' field.
      * @return This builder.
      */
    public Service.Builder clearOperations() {
      operations = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Service build() {
      try {
        Service record = new Service();
        record.title = fieldSetFlags()[0] ? this.title : (String) defaultValue(fields()[0]);
        record.alternateTitle = fieldSetFlags()[1] ? this.alternateTitle : (String) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (String) defaultValue(fields()[2]);
        record.date = fieldSetFlags()[3] ? this.date : (String) defaultValue(fields()[3]);
        record.dateType = fieldSetFlags()[4] ? this.dateType : (String) defaultValue(fields()[4]);
        if (pointOfContactBuilder != null) {
          record.pointOfContact = this.pointOfContactBuilder.build();
        } else {
          record.pointOfContact = fieldSetFlags()[5] ? this.pointOfContact : (ResponsibleParty) defaultValue(fields()[5]);
        }
        record.operations = fieldSetFlags()[6] ? this.operations : (java.util.List<Link>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
