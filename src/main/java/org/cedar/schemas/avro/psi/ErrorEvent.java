/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.psi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Contains information about errors encountered while performing an operation */
@org.apache.avro.specific.AvroGenerated
public class ErrorEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8663262264964707722L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ErrorEvent\",\"namespace\":\"org.cedar.psi.common.avro\",\"doc\":\"Contains information about errors encountered while performing an operation\",\"fields\":[{\"name\":\"title\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"A short, human-readable summary of the problem that should not change from occurrence to occurrence of the problem.\",\"default\":null},{\"name\":\"detail\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"A human-readable explanation specific to this occurrence of the problem.\",\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"int\"],\"doc\":\"The HTTP status code applicable to this problem.\",\"default\":null},{\"name\":\"code\",\"type\":[\"null\",\"int\"],\"doc\":\"An application-specific error code.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** A short, human-readable summary of the problem that should not change from occurrence to occurrence of the problem. */
   private String title;
  /** A human-readable explanation specific to this occurrence of the problem. */
   private String detail;
  /** The HTTP status code applicable to this problem. */
   private Integer status;
  /** An application-specific error code. */
   private Integer code;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ErrorEvent() {}

  /**
   * All-args constructor.
   * @param title A short, human-readable summary of the problem that should not change from occurrence to occurrence of the problem.
   * @param detail A human-readable explanation specific to this occurrence of the problem.
   * @param status The HTTP status code applicable to this problem.
   * @param code An application-specific error code.
   */
  public ErrorEvent(String title, String detail, Integer status, Integer code) {
    this.title = title;
    this.detail = detail;
    this.status = status;
    this.code = code;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return title;
    case 1: return detail;
    case 2: return status;
    case 3: return code;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: title = (String)value$; break;
    case 1: detail = (String)value$; break;
    case 2: status = (Integer)value$; break;
    case 3: code = (Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'title' field.
   * @return A short, human-readable summary of the problem that should not change from occurrence to occurrence of the problem.
   */
  public String getTitle() {
    return title;
  }


  /**
   * Gets the value of the 'detail' field.
   * @return A human-readable explanation specific to this occurrence of the problem.
   */
  public String getDetail() {
    return detail;
  }


  /**
   * Gets the value of the 'status' field.
   * @return The HTTP status code applicable to this problem.
   */
  public Integer getStatus() {
    return status;
  }


  /**
   * Gets the value of the 'code' field.
   * @return An application-specific error code.
   */
  public Integer getCode() {
    return code;
  }


  /**
   * Creates a new ErrorEvent RecordBuilder.
   * @return A new ErrorEvent RecordBuilder
   */
  public static ErrorEvent.Builder newBuilder() {
    return new ErrorEvent.Builder();
  }

  /**
   * Creates a new ErrorEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ErrorEvent RecordBuilder
   */
  public static ErrorEvent.Builder newBuilder(ErrorEvent.Builder other) {
    return new ErrorEvent.Builder(other);
  }

  /**
   * Creates a new ErrorEvent RecordBuilder by copying an existing ErrorEvent instance.
   * @param other The existing instance to copy.
   * @return A new ErrorEvent RecordBuilder
   */
  public static ErrorEvent.Builder newBuilder(ErrorEvent other) {
    return new ErrorEvent.Builder(other);
  }

  /**
   * RecordBuilder for ErrorEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ErrorEvent>
    implements org.apache.avro.data.RecordBuilder<ErrorEvent> {

    /** A short, human-readable summary of the problem that should not change from occurrence to occurrence of the problem. */
    private String title;
    /** A human-readable explanation specific to this occurrence of the problem. */
    private String detail;
    /** The HTTP status code applicable to this problem. */
    private Integer status;
    /** An application-specific error code. */
    private Integer code;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ErrorEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.detail)) {
        this.detail = data().deepCopy(fields()[1].schema(), other.detail);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.code)) {
        this.code = data().deepCopy(fields()[3].schema(), other.code);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ErrorEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(ErrorEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.detail)) {
        this.detail = data().deepCopy(fields()[1].schema(), other.detail);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.code)) {
        this.code = data().deepCopy(fields()[3].schema(), other.code);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'title' field.
      * A short, human-readable summary of the problem that should not change from occurrence to occurrence of the problem.
      * @return The value.
      */
    public String getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * A short, human-readable summary of the problem that should not change from occurrence to occurrence of the problem.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public ErrorEvent.Builder setTitle(String value) {
      validate(fields()[0], value);
      this.title = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * A short, human-readable summary of the problem that should not change from occurrence to occurrence of the problem.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'title' field.
      * A short, human-readable summary of the problem that should not change from occurrence to occurrence of the problem.
      * @return This builder.
      */
    public ErrorEvent.Builder clearTitle() {
      title = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'detail' field.
      * A human-readable explanation specific to this occurrence of the problem.
      * @return The value.
      */
    public String getDetail() {
      return detail;
    }

    /**
      * Sets the value of the 'detail' field.
      * A human-readable explanation specific to this occurrence of the problem.
      * @param value The value of 'detail'.
      * @return This builder.
      */
    public ErrorEvent.Builder setDetail(String value) {
      validate(fields()[1], value);
      this.detail = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'detail' field has been set.
      * A human-readable explanation specific to this occurrence of the problem.
      * @return True if the 'detail' field has been set, false otherwise.
      */
    public boolean hasDetail() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'detail' field.
      * A human-readable explanation specific to this occurrence of the problem.
      * @return This builder.
      */
    public ErrorEvent.Builder clearDetail() {
      detail = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * The HTTP status code applicable to this problem.
      * @return The value.
      */
    public Integer getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * The HTTP status code applicable to this problem.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public ErrorEvent.Builder setStatus(Integer value) {
      validate(fields()[2], value);
      this.status = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * The HTTP status code applicable to this problem.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'status' field.
      * The HTTP status code applicable to this problem.
      * @return This builder.
      */
    public ErrorEvent.Builder clearStatus() {
      status = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * An application-specific error code.
      * @return The value.
      */
    public Integer getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * An application-specific error code.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public ErrorEvent.Builder setCode(Integer value) {
      validate(fields()[3], value);
      this.code = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * An application-specific error code.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'code' field.
      * An application-specific error code.
      * @return This builder.
      */
    public ErrorEvent.Builder clearCode() {
      code = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ErrorEvent build() {
      try {
        ErrorEvent record = new ErrorEvent();
        record.title = fieldSetFlags()[0] ? this.title : (String) defaultValue(fields()[0]);
        record.detail = fieldSetFlags()[1] ? this.detail : (String) defaultValue(fields()[1]);
        record.status = fieldSetFlags()[2] ? this.status : (Integer) defaultValue(fields()[2]);
        record.code = fieldSetFlags()[3] ? this.code : (Integer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
