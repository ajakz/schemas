/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.psi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Reference extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4321130465562443816L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Reference\",\"namespace\":\"org.cedar.psi.common.avro\",\"fields\":[{\"name\":\"title\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"date\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"links\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Link\",\"fields\":[{\"name\":\"linkName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkProtocol\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkUrl\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"linkFunction\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private String title;
   private String date;
   private java.util.List<Link> links;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Reference() {}

  /**
   * All-args constructor.
   * @param title The new value for title
   * @param date The new value for date
   * @param links The new value for links
   */
  public Reference(String title, String date, java.util.List<Link> links) {
    this.title = title;
    this.date = date;
    this.links = links;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return title;
    case 1: return date;
    case 2: return links;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: title = (String)value$; break;
    case 1: date = (String)value$; break;
    case 2: links = (java.util.List<Link>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public String getTitle() {
    return title;
  }


  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public String getDate() {
    return date;
  }


  /**
   * Gets the value of the 'links' field.
   * @return The value of the 'links' field.
   */
  public java.util.List<Link> getLinks() {
    return links;
  }


  /**
   * Creates a new Reference RecordBuilder.
   * @return A new Reference RecordBuilder
   */
  public static Reference.Builder newBuilder() {
    return new Reference.Builder();
  }

  /**
   * Creates a new Reference RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Reference RecordBuilder
   */
  public static Reference.Builder newBuilder(Reference.Builder other) {
    return new Reference.Builder(other);
  }

  /**
   * Creates a new Reference RecordBuilder by copying an existing Reference instance.
   * @param other The existing instance to copy.
   * @return A new Reference RecordBuilder
   */
  public static Reference.Builder newBuilder(Reference other) {
    return new Reference.Builder(other);
  }

  /**
   * RecordBuilder for Reference instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Reference>
    implements org.apache.avro.data.RecordBuilder<Reference> {

    private String title;
    private String date;
    private java.util.List<Link> links;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Reference.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.links)) {
        this.links = data().deepCopy(fields()[2].schema(), other.links);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Reference instance
     * @param other The existing instance to copy.
     */
    private Builder(Reference other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.links)) {
        this.links = data().deepCopy(fields()[2].schema(), other.links);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public String getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public Reference.Builder setTitle(String value) {
      validate(fields()[0], value);
      this.title = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public Reference.Builder clearTitle() {
      title = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public String getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public Reference.Builder setDate(String value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public Reference.Builder clearDate() {
      date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'links' field.
      * @return The value.
      */
    public java.util.List<Link> getLinks() {
      return links;
    }

    /**
      * Sets the value of the 'links' field.
      * @param value The value of 'links'.
      * @return This builder.
      */
    public Reference.Builder setLinks(java.util.List<Link> value) {
      validate(fields()[2], value);
      this.links = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'links' field has been set.
      * @return True if the 'links' field has been set, false otherwise.
      */
    public boolean hasLinks() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'links' field.
      * @return This builder.
      */
    public Reference.Builder clearLinks() {
      links = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Reference build() {
      try {
        Reference record = new Reference();
        record.title = fieldSetFlags()[0] ? this.title : (String) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (String) defaultValue(fields()[1]);
        record.links = fieldSetFlags()[2] ? this.links : (java.util.List<Link>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
