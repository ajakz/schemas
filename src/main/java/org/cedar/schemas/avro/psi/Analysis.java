/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.psi;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** The shape of the analysis object generated within Inventory Manager for a successfully parsed metadata document. Content within this object is related to the quality of the content of specific metadata fields, which can be used downstream to determine whether or not a given document should be accepted into another service, such as the OneStop search platform. */
@org.apache.avro.specific.AvroGenerated
public class Analysis extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9105372821827191221L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Analysis\",\"namespace\":\"org.cedar.psi.common.avro\",\"doc\":\"The shape of the analysis object generated within Inventory Manager for a successfully parsed metadata document. Content within this object is related to the quality of the content of specific metadata fields, which can be used downstream to determine whether or not a given document should be accepted into another service, such as the OneStop search platform.\",\"fields\":[{\"name\":\"identification\",\"type\":{\"type\":\"record\",\"name\":\"IdentificationAnalysis\",\"fields\":[{\"name\":\"fileIdentifierExists\",\"type\":\"boolean\"},{\"name\":\"fileIdentifierString\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"doiExists\",\"type\":\"boolean\"},{\"name\":\"doiString\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"parentIdentifierExists\",\"type\":\"boolean\"},{\"name\":\"parentIdentifierString\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"hierarchyLevelNameExists\",\"type\":\"boolean\"},{\"name\":\"matchesIdentifiers\",\"type\":\"boolean\",\"doc\":\"Resolves to true if 'granule' specified as hierarchy level and both fileId & parentId provided OR if no hierarchy level specified.\"}]},\"doc\":\"Assessment of the identifying elements of the metadata.\"},{\"name\":\"titles\",\"type\":{\"type\":\"record\",\"name\":\"TitleAnalysis\",\"fields\":[{\"name\":\"titleExists\",\"type\":\"boolean\"},{\"name\":\"titleCharacters\",\"type\":\"int\"},{\"name\":\"alternateTitleExists\",\"type\":\"boolean\"},{\"name\":\"alternateTitleCharacters\",\"type\":\"int\"}]},\"doc\":\"Assessment of the titles in the metadata.\"},{\"name\":\"description\",\"type\":{\"type\":\"record\",\"name\":\"DescriptionAnalysis\",\"fields\":[{\"name\":\"descriptionExists\",\"type\":\"boolean\"},{\"name\":\"descriptionCharacters\",\"type\":\"int\"}]},\"doc\":\"Assessment of the titles in the metadata.\"},{\"name\":\"dataAccess\",\"type\":{\"type\":\"record\",\"name\":\"DataAccessAnalysis\",\"fields\":[{\"name\":\"dataAccessExists\",\"type\":\"boolean\"}]}},{\"name\":\"thumbnail\",\"type\":{\"type\":\"record\",\"name\":\"ThumbnailAnalysis\",\"fields\":[{\"name\":\"thumbnailExists\",\"type\":\"boolean\"}]}},{\"name\":\"temporalBounding\",\"type\":{\"type\":\"record\",\"name\":\"TemporalBoundingAnalysis\",\"fields\":[{\"name\":\"beginExists\",\"type\":\"boolean\"},{\"name\":\"beginPrecision\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"beginIndexable\",\"type\":\"boolean\"},{\"name\":\"beginZoneSpecified\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"beginUtcDateTimeString\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"endExists\",\"type\":\"boolean\"},{\"name\":\"endPrecision\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"endIndexable\",\"type\":\"boolean\"},{\"name\":\"endZoneSpecified\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"endUtcDateTimeString\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instantExists\",\"type\":\"boolean\"},{\"name\":\"instantPrecision\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instantIndexable\",\"type\":\"boolean\"},{\"name\":\"instantZoneSpecified\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instantUtcDateTimeString\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"rangeDescriptor\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"rangeBeginLTEEnd\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"boolean\"]}]}},{\"name\":\"spatialBounding\",\"type\":{\"type\":\"record\",\"name\":\"SpatialBoundingAnalysis\",\"fields\":[{\"name\":\"spatialBoundingExists\",\"type\":\"boolean\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Assessment of the identifying elements of the metadata. */
   private IdentificationAnalysis identification;
  /** Assessment of the titles in the metadata. */
   private TitleAnalysis titles;
  /** Assessment of the titles in the metadata. */
   private DescriptionAnalysis description;
   private DataAccessAnalysis dataAccess;
   private ThumbnailAnalysis thumbnail;
   private TemporalBoundingAnalysis temporalBounding;
   private SpatialBoundingAnalysis spatialBounding;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Analysis() {}

  /**
   * All-args constructor.
   * @param identification Assessment of the identifying elements of the metadata.
   * @param titles Assessment of the titles in the metadata.
   * @param description Assessment of the titles in the metadata.
   * @param dataAccess The new value for dataAccess
   * @param thumbnail The new value for thumbnail
   * @param temporalBounding The new value for temporalBounding
   * @param spatialBounding The new value for spatialBounding
   */
  public Analysis(IdentificationAnalysis identification, TitleAnalysis titles, DescriptionAnalysis description, DataAccessAnalysis dataAccess, ThumbnailAnalysis thumbnail, TemporalBoundingAnalysis temporalBounding, SpatialBoundingAnalysis spatialBounding) {
    this.identification = identification;
    this.titles = titles;
    this.description = description;
    this.dataAccess = dataAccess;
    this.thumbnail = thumbnail;
    this.temporalBounding = temporalBounding;
    this.spatialBounding = spatialBounding;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return identification;
    case 1: return titles;
    case 2: return description;
    case 3: return dataAccess;
    case 4: return thumbnail;
    case 5: return temporalBounding;
    case 6: return spatialBounding;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: identification = (IdentificationAnalysis)value$; break;
    case 1: titles = (TitleAnalysis)value$; break;
    case 2: description = (DescriptionAnalysis)value$; break;
    case 3: dataAccess = (DataAccessAnalysis)value$; break;
    case 4: thumbnail = (ThumbnailAnalysis)value$; break;
    case 5: temporalBounding = (TemporalBoundingAnalysis)value$; break;
    case 6: spatialBounding = (SpatialBoundingAnalysis)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'identification' field.
   * @return Assessment of the identifying elements of the metadata.
   */
  public IdentificationAnalysis getIdentification() {
    return identification;
  }


  /**
   * Gets the value of the 'titles' field.
   * @return Assessment of the titles in the metadata.
   */
  public TitleAnalysis getTitles() {
    return titles;
  }


  /**
   * Gets the value of the 'description' field.
   * @return Assessment of the titles in the metadata.
   */
  public DescriptionAnalysis getDescription() {
    return description;
  }


  /**
   * Gets the value of the 'dataAccess' field.
   * @return The value of the 'dataAccess' field.
   */
  public DataAccessAnalysis getDataAccess() {
    return dataAccess;
  }


  /**
   * Gets the value of the 'thumbnail' field.
   * @return The value of the 'thumbnail' field.
   */
  public ThumbnailAnalysis getThumbnail() {
    return thumbnail;
  }


  /**
   * Gets the value of the 'temporalBounding' field.
   * @return The value of the 'temporalBounding' field.
   */
  public TemporalBoundingAnalysis getTemporalBounding() {
    return temporalBounding;
  }


  /**
   * Gets the value of the 'spatialBounding' field.
   * @return The value of the 'spatialBounding' field.
   */
  public SpatialBoundingAnalysis getSpatialBounding() {
    return spatialBounding;
  }


  /**
   * Creates a new Analysis RecordBuilder.
   * @return A new Analysis RecordBuilder
   */
  public static Analysis.Builder newBuilder() {
    return new Analysis.Builder();
  }

  /**
   * Creates a new Analysis RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Analysis RecordBuilder
   */
  public static Analysis.Builder newBuilder(Analysis.Builder other) {
    return new Analysis.Builder(other);
  }

  /**
   * Creates a new Analysis RecordBuilder by copying an existing Analysis instance.
   * @param other The existing instance to copy.
   * @return A new Analysis RecordBuilder
   */
  public static Analysis.Builder newBuilder(Analysis other) {
    return new Analysis.Builder(other);
  }

  /**
   * RecordBuilder for Analysis instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Analysis>
    implements org.apache.avro.data.RecordBuilder<Analysis> {

    /** Assessment of the identifying elements of the metadata. */
    private IdentificationAnalysis identification;
    private IdentificationAnalysis.Builder identificationBuilder;
    /** Assessment of the titles in the metadata. */
    private TitleAnalysis titles;
    private TitleAnalysis.Builder titlesBuilder;
    /** Assessment of the titles in the metadata. */
    private DescriptionAnalysis description;
    private DescriptionAnalysis.Builder descriptionBuilder;
    private DataAccessAnalysis dataAccess;
    private DataAccessAnalysis.Builder dataAccessBuilder;
    private ThumbnailAnalysis thumbnail;
    private ThumbnailAnalysis.Builder thumbnailBuilder;
    private TemporalBoundingAnalysis temporalBounding;
    private TemporalBoundingAnalysis.Builder temporalBoundingBuilder;
    private SpatialBoundingAnalysis spatialBounding;
    private SpatialBoundingAnalysis.Builder spatialBoundingBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Analysis.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.identification)) {
        this.identification = data().deepCopy(fields()[0].schema(), other.identification);
        fieldSetFlags()[0] = true;
      }
      if (other.hasIdentificationBuilder()) {
        this.identificationBuilder = IdentificationAnalysis.newBuilder(other.getIdentificationBuilder());
      }
      if (isValidValue(fields()[1], other.titles)) {
        this.titles = data().deepCopy(fields()[1].schema(), other.titles);
        fieldSetFlags()[1] = true;
      }
      if (other.hasTitlesBuilder()) {
        this.titlesBuilder = TitleAnalysis.newBuilder(other.getTitlesBuilder());
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (other.hasDescriptionBuilder()) {
        this.descriptionBuilder = DescriptionAnalysis.newBuilder(other.getDescriptionBuilder());
      }
      if (isValidValue(fields()[3], other.dataAccess)) {
        this.dataAccess = data().deepCopy(fields()[3].schema(), other.dataAccess);
        fieldSetFlags()[3] = true;
      }
      if (other.hasDataAccessBuilder()) {
        this.dataAccessBuilder = DataAccessAnalysis.newBuilder(other.getDataAccessBuilder());
      }
      if (isValidValue(fields()[4], other.thumbnail)) {
        this.thumbnail = data().deepCopy(fields()[4].schema(), other.thumbnail);
        fieldSetFlags()[4] = true;
      }
      if (other.hasThumbnailBuilder()) {
        this.thumbnailBuilder = ThumbnailAnalysis.newBuilder(other.getThumbnailBuilder());
      }
      if (isValidValue(fields()[5], other.temporalBounding)) {
        this.temporalBounding = data().deepCopy(fields()[5].schema(), other.temporalBounding);
        fieldSetFlags()[5] = true;
      }
      if (other.hasTemporalBoundingBuilder()) {
        this.temporalBoundingBuilder = TemporalBoundingAnalysis.newBuilder(other.getTemporalBoundingBuilder());
      }
      if (isValidValue(fields()[6], other.spatialBounding)) {
        this.spatialBounding = data().deepCopy(fields()[6].schema(), other.spatialBounding);
        fieldSetFlags()[6] = true;
      }
      if (other.hasSpatialBoundingBuilder()) {
        this.spatialBoundingBuilder = SpatialBoundingAnalysis.newBuilder(other.getSpatialBoundingBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Analysis instance
     * @param other The existing instance to copy.
     */
    private Builder(Analysis other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.identification)) {
        this.identification = data().deepCopy(fields()[0].schema(), other.identification);
        fieldSetFlags()[0] = true;
      }
      this.identificationBuilder = null;
      if (isValidValue(fields()[1], other.titles)) {
        this.titles = data().deepCopy(fields()[1].schema(), other.titles);
        fieldSetFlags()[1] = true;
      }
      this.titlesBuilder = null;
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      this.descriptionBuilder = null;
      if (isValidValue(fields()[3], other.dataAccess)) {
        this.dataAccess = data().deepCopy(fields()[3].schema(), other.dataAccess);
        fieldSetFlags()[3] = true;
      }
      this.dataAccessBuilder = null;
      if (isValidValue(fields()[4], other.thumbnail)) {
        this.thumbnail = data().deepCopy(fields()[4].schema(), other.thumbnail);
        fieldSetFlags()[4] = true;
      }
      this.thumbnailBuilder = null;
      if (isValidValue(fields()[5], other.temporalBounding)) {
        this.temporalBounding = data().deepCopy(fields()[5].schema(), other.temporalBounding);
        fieldSetFlags()[5] = true;
      }
      this.temporalBoundingBuilder = null;
      if (isValidValue(fields()[6], other.spatialBounding)) {
        this.spatialBounding = data().deepCopy(fields()[6].schema(), other.spatialBounding);
        fieldSetFlags()[6] = true;
      }
      this.spatialBoundingBuilder = null;
    }

    /**
      * Gets the value of the 'identification' field.
      * Assessment of the identifying elements of the metadata.
      * @return The value.
      */
    public IdentificationAnalysis getIdentification() {
      return identification;
    }

    /**
      * Sets the value of the 'identification' field.
      * Assessment of the identifying elements of the metadata.
      * @param value The value of 'identification'.
      * @return This builder.
      */
    public Analysis.Builder setIdentification(IdentificationAnalysis value) {
      validate(fields()[0], value);
      this.identificationBuilder = null;
      this.identification = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'identification' field has been set.
      * Assessment of the identifying elements of the metadata.
      * @return True if the 'identification' field has been set, false otherwise.
      */
    public boolean hasIdentification() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'identification' field and creates one if it doesn't exist yet.
     * Assessment of the identifying elements of the metadata.
     * @return This builder.
     */
    public IdentificationAnalysis.Builder getIdentificationBuilder() {
      if (identificationBuilder == null) {
        if (hasIdentification()) {
          setIdentificationBuilder(IdentificationAnalysis.newBuilder(identification));
        } else {
          setIdentificationBuilder(IdentificationAnalysis.newBuilder());
        }
      }
      return identificationBuilder;
    }

    /**
     * Sets the Builder instance for the 'identification' field
     * Assessment of the identifying elements of the metadata.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Analysis.Builder setIdentificationBuilder(IdentificationAnalysis.Builder value) {
      clearIdentification();
      identificationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'identification' field has an active Builder instance
     * Assessment of the identifying elements of the metadata.
     * @return True if the 'identification' field has an active Builder instance
     */
    public boolean hasIdentificationBuilder() {
      return identificationBuilder != null;
    }

    /**
      * Clears the value of the 'identification' field.
      * Assessment of the identifying elements of the metadata.
      * @return This builder.
      */
    public Analysis.Builder clearIdentification() {
      identification = null;
      identificationBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'titles' field.
      * Assessment of the titles in the metadata.
      * @return The value.
      */
    public TitleAnalysis getTitles() {
      return titles;
    }

    /**
      * Sets the value of the 'titles' field.
      * Assessment of the titles in the metadata.
      * @param value The value of 'titles'.
      * @return This builder.
      */
    public Analysis.Builder setTitles(TitleAnalysis value) {
      validate(fields()[1], value);
      this.titlesBuilder = null;
      this.titles = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'titles' field has been set.
      * Assessment of the titles in the metadata.
      * @return True if the 'titles' field has been set, false otherwise.
      */
    public boolean hasTitles() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'titles' field and creates one if it doesn't exist yet.
     * Assessment of the titles in the metadata.
     * @return This builder.
     */
    public TitleAnalysis.Builder getTitlesBuilder() {
      if (titlesBuilder == null) {
        if (hasTitles()) {
          setTitlesBuilder(TitleAnalysis.newBuilder(titles));
        } else {
          setTitlesBuilder(TitleAnalysis.newBuilder());
        }
      }
      return titlesBuilder;
    }

    /**
     * Sets the Builder instance for the 'titles' field
     * Assessment of the titles in the metadata.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Analysis.Builder setTitlesBuilder(TitleAnalysis.Builder value) {
      clearTitles();
      titlesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'titles' field has an active Builder instance
     * Assessment of the titles in the metadata.
     * @return True if the 'titles' field has an active Builder instance
     */
    public boolean hasTitlesBuilder() {
      return titlesBuilder != null;
    }

    /**
      * Clears the value of the 'titles' field.
      * Assessment of the titles in the metadata.
      * @return This builder.
      */
    public Analysis.Builder clearTitles() {
      titles = null;
      titlesBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Assessment of the titles in the metadata.
      * @return The value.
      */
    public DescriptionAnalysis getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * Assessment of the titles in the metadata.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public Analysis.Builder setDescription(DescriptionAnalysis value) {
      validate(fields()[2], value);
      this.descriptionBuilder = null;
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Assessment of the titles in the metadata.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'description' field and creates one if it doesn't exist yet.
     * Assessment of the titles in the metadata.
     * @return This builder.
     */
    public DescriptionAnalysis.Builder getDescriptionBuilder() {
      if (descriptionBuilder == null) {
        if (hasDescription()) {
          setDescriptionBuilder(DescriptionAnalysis.newBuilder(description));
        } else {
          setDescriptionBuilder(DescriptionAnalysis.newBuilder());
        }
      }
      return descriptionBuilder;
    }

    /**
     * Sets the Builder instance for the 'description' field
     * Assessment of the titles in the metadata.
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Analysis.Builder setDescriptionBuilder(DescriptionAnalysis.Builder value) {
      clearDescription();
      descriptionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'description' field has an active Builder instance
     * Assessment of the titles in the metadata.
     * @return True if the 'description' field has an active Builder instance
     */
    public boolean hasDescriptionBuilder() {
      return descriptionBuilder != null;
    }

    /**
      * Clears the value of the 'description' field.
      * Assessment of the titles in the metadata.
      * @return This builder.
      */
    public Analysis.Builder clearDescription() {
      description = null;
      descriptionBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataAccess' field.
      * @return The value.
      */
    public DataAccessAnalysis getDataAccess() {
      return dataAccess;
    }

    /**
      * Sets the value of the 'dataAccess' field.
      * @param value The value of 'dataAccess'.
      * @return This builder.
      */
    public Analysis.Builder setDataAccess(DataAccessAnalysis value) {
      validate(fields()[3], value);
      this.dataAccessBuilder = null;
      this.dataAccess = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'dataAccess' field has been set.
      * @return True if the 'dataAccess' field has been set, false otherwise.
      */
    public boolean hasDataAccess() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'dataAccess' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public DataAccessAnalysis.Builder getDataAccessBuilder() {
      if (dataAccessBuilder == null) {
        if (hasDataAccess()) {
          setDataAccessBuilder(DataAccessAnalysis.newBuilder(dataAccess));
        } else {
          setDataAccessBuilder(DataAccessAnalysis.newBuilder());
        }
      }
      return dataAccessBuilder;
    }

    /**
     * Sets the Builder instance for the 'dataAccess' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Analysis.Builder setDataAccessBuilder(DataAccessAnalysis.Builder value) {
      clearDataAccess();
      dataAccessBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'dataAccess' field has an active Builder instance
     * @return True if the 'dataAccess' field has an active Builder instance
     */
    public boolean hasDataAccessBuilder() {
      return dataAccessBuilder != null;
    }

    /**
      * Clears the value of the 'dataAccess' field.
      * @return This builder.
      */
    public Analysis.Builder clearDataAccess() {
      dataAccess = null;
      dataAccessBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'thumbnail' field.
      * @return The value.
      */
    public ThumbnailAnalysis getThumbnail() {
      return thumbnail;
    }

    /**
      * Sets the value of the 'thumbnail' field.
      * @param value The value of 'thumbnail'.
      * @return This builder.
      */
    public Analysis.Builder setThumbnail(ThumbnailAnalysis value) {
      validate(fields()[4], value);
      this.thumbnailBuilder = null;
      this.thumbnail = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'thumbnail' field has been set.
      * @return True if the 'thumbnail' field has been set, false otherwise.
      */
    public boolean hasThumbnail() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'thumbnail' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public ThumbnailAnalysis.Builder getThumbnailBuilder() {
      if (thumbnailBuilder == null) {
        if (hasThumbnail()) {
          setThumbnailBuilder(ThumbnailAnalysis.newBuilder(thumbnail));
        } else {
          setThumbnailBuilder(ThumbnailAnalysis.newBuilder());
        }
      }
      return thumbnailBuilder;
    }

    /**
     * Sets the Builder instance for the 'thumbnail' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Analysis.Builder setThumbnailBuilder(ThumbnailAnalysis.Builder value) {
      clearThumbnail();
      thumbnailBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'thumbnail' field has an active Builder instance
     * @return True if the 'thumbnail' field has an active Builder instance
     */
    public boolean hasThumbnailBuilder() {
      return thumbnailBuilder != null;
    }

    /**
      * Clears the value of the 'thumbnail' field.
      * @return This builder.
      */
    public Analysis.Builder clearThumbnail() {
      thumbnail = null;
      thumbnailBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'temporalBounding' field.
      * @return The value.
      */
    public TemporalBoundingAnalysis getTemporalBounding() {
      return temporalBounding;
    }

    /**
      * Sets the value of the 'temporalBounding' field.
      * @param value The value of 'temporalBounding'.
      * @return This builder.
      */
    public Analysis.Builder setTemporalBounding(TemporalBoundingAnalysis value) {
      validate(fields()[5], value);
      this.temporalBoundingBuilder = null;
      this.temporalBounding = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'temporalBounding' field has been set.
      * @return True if the 'temporalBounding' field has been set, false otherwise.
      */
    public boolean hasTemporalBounding() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'temporalBounding' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public TemporalBoundingAnalysis.Builder getTemporalBoundingBuilder() {
      if (temporalBoundingBuilder == null) {
        if (hasTemporalBounding()) {
          setTemporalBoundingBuilder(TemporalBoundingAnalysis.newBuilder(temporalBounding));
        } else {
          setTemporalBoundingBuilder(TemporalBoundingAnalysis.newBuilder());
        }
      }
      return temporalBoundingBuilder;
    }

    /**
     * Sets the Builder instance for the 'temporalBounding' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Analysis.Builder setTemporalBoundingBuilder(TemporalBoundingAnalysis.Builder value) {
      clearTemporalBounding();
      temporalBoundingBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'temporalBounding' field has an active Builder instance
     * @return True if the 'temporalBounding' field has an active Builder instance
     */
    public boolean hasTemporalBoundingBuilder() {
      return temporalBoundingBuilder != null;
    }

    /**
      * Clears the value of the 'temporalBounding' field.
      * @return This builder.
      */
    public Analysis.Builder clearTemporalBounding() {
      temporalBounding = null;
      temporalBoundingBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'spatialBounding' field.
      * @return The value.
      */
    public SpatialBoundingAnalysis getSpatialBounding() {
      return spatialBounding;
    }

    /**
      * Sets the value of the 'spatialBounding' field.
      * @param value The value of 'spatialBounding'.
      * @return This builder.
      */
    public Analysis.Builder setSpatialBounding(SpatialBoundingAnalysis value) {
      validate(fields()[6], value);
      this.spatialBoundingBuilder = null;
      this.spatialBounding = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'spatialBounding' field has been set.
      * @return True if the 'spatialBounding' field has been set, false otherwise.
      */
    public boolean hasSpatialBounding() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'spatialBounding' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public SpatialBoundingAnalysis.Builder getSpatialBoundingBuilder() {
      if (spatialBoundingBuilder == null) {
        if (hasSpatialBounding()) {
          setSpatialBoundingBuilder(SpatialBoundingAnalysis.newBuilder(spatialBounding));
        } else {
          setSpatialBoundingBuilder(SpatialBoundingAnalysis.newBuilder());
        }
      }
      return spatialBoundingBuilder;
    }

    /**
     * Sets the Builder instance for the 'spatialBounding' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Analysis.Builder setSpatialBoundingBuilder(SpatialBoundingAnalysis.Builder value) {
      clearSpatialBounding();
      spatialBoundingBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'spatialBounding' field has an active Builder instance
     * @return True if the 'spatialBounding' field has an active Builder instance
     */
    public boolean hasSpatialBoundingBuilder() {
      return spatialBoundingBuilder != null;
    }

    /**
      * Clears the value of the 'spatialBounding' field.
      * @return This builder.
      */
    public Analysis.Builder clearSpatialBounding() {
      spatialBounding = null;
      spatialBoundingBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Analysis build() {
      try {
        Analysis record = new Analysis();
        if (identificationBuilder != null) {
          record.identification = this.identificationBuilder.build();
        } else {
          record.identification = fieldSetFlags()[0] ? this.identification : (IdentificationAnalysis) defaultValue(fields()[0]);
        }
        if (titlesBuilder != null) {
          record.titles = this.titlesBuilder.build();
        } else {
          record.titles = fieldSetFlags()[1] ? this.titles : (TitleAnalysis) defaultValue(fields()[1]);
        }
        if (descriptionBuilder != null) {
          record.description = this.descriptionBuilder.build();
        } else {
          record.description = fieldSetFlags()[2] ? this.description : (DescriptionAnalysis) defaultValue(fields()[2]);
        }
        if (dataAccessBuilder != null) {
          record.dataAccess = this.dataAccessBuilder.build();
        } else {
          record.dataAccess = fieldSetFlags()[3] ? this.dataAccess : (DataAccessAnalysis) defaultValue(fields()[3]);
        }
        if (thumbnailBuilder != null) {
          record.thumbnail = this.thumbnailBuilder.build();
        } else {
          record.thumbnail = fieldSetFlags()[4] ? this.thumbnail : (ThumbnailAnalysis) defaultValue(fields()[4]);
        }
        if (temporalBoundingBuilder != null) {
          record.temporalBounding = this.temporalBoundingBuilder.build();
        } else {
          record.temporalBounding = fieldSetFlags()[5] ? this.temporalBounding : (TemporalBoundingAnalysis) defaultValue(fields()[5]);
        }
        if (spatialBoundingBuilder != null) {
          record.spatialBounding = this.spatialBoundingBuilder.build();
        } else {
          record.spatialBounding = fieldSetFlags()[6] ? this.spatialBounding : (SpatialBoundingAnalysis) defaultValue(fields()[6]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
