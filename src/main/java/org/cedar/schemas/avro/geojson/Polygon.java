/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.cedar.schemas.avro.geojson;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** An array of linear rings, which are linestrings of four or more positions that are CLOSED, meaning the first and last positions are identical. The first (required) linear ring describes the polygon's exterior boundary. Subsequent (optional) linear rings describe holes in the polygon. Point positions MUST follow the right-hand rule for order, i.e., exterior rings are counterclockwise and holes are clockwise. Each point must be described with two values: longitude then latitude. A third (optional) value for elevation is allowed per position. */
@org.apache.avro.specific.AvroGenerated
public class Polygon extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4261335970290547275L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Polygon\",\"namespace\":\"org.cedar.psi.common.avro\",\"doc\":\"An array of linear rings, which are linestrings of four or more positions that are CLOSED, meaning the first and last positions are identical. The first (required) linear ring describes the polygon's exterior boundary. Subsequent (optional) linear rings describe holes in the polygon. Point positions MUST follow the right-hand rule for order, i.e., exterior rings are counterclockwise and holes are clockwise. Each point must be described with two values: longitude then latitude. A third (optional) value for elevation is allowed per position.\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"PolygonType\",\"symbols\":[\"Polygon\"]}},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"array\",\"items\":[{\"type\":\"array\",\"items\":\"double\"}]}]},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private PolygonType type;
   private java.util.List<Object> coordinates;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Polygon() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param coordinates The new value for coordinates
   */
  public Polygon(PolygonType type, java.util.List<Object> coordinates) {
    this.type = type;
    this.coordinates = coordinates;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return coordinates;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: type = (PolygonType)value$; break;
    case 1: coordinates = (java.util.List<Object>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public PolygonType getType() {
    return type;
  }


  /**
   * Gets the value of the 'coordinates' field.
   * @return The value of the 'coordinates' field.
   */
  public java.util.List<Object> getCoordinates() {
    return coordinates;
  }


  /**
   * Creates a new Polygon RecordBuilder.
   * @return A new Polygon RecordBuilder
   */
  public static Polygon.Builder newBuilder() {
    return new Polygon.Builder();
  }

  /**
   * Creates a new Polygon RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Polygon RecordBuilder
   */
  public static Polygon.Builder newBuilder(Polygon.Builder other) {
    return new Polygon.Builder(other);
  }

  /**
   * Creates a new Polygon RecordBuilder by copying an existing Polygon instance.
   * @param other The existing instance to copy.
   * @return A new Polygon RecordBuilder
   */
  public static Polygon.Builder newBuilder(Polygon other) {
    return new Polygon.Builder(other);
  }

  /**
   * RecordBuilder for Polygon instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Polygon>
    implements org.apache.avro.data.RecordBuilder<Polygon> {

    private PolygonType type;
    private java.util.List<Object> coordinates;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Polygon.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.coordinates)) {
        this.coordinates = data().deepCopy(fields()[1].schema(), other.coordinates);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Polygon instance
     * @param other The existing instance to copy.
     */
    private Builder(Polygon other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.coordinates)) {
        this.coordinates = data().deepCopy(fields()[1].schema(), other.coordinates);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public PolygonType getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public Polygon.Builder setType(PolygonType value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public Polygon.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'coordinates' field.
      * @return The value.
      */
    public java.util.List<Object> getCoordinates() {
      return coordinates;
    }

    /**
      * Sets the value of the 'coordinates' field.
      * @param value The value of 'coordinates'.
      * @return This builder.
      */
    public Polygon.Builder setCoordinates(java.util.List<Object> value) {
      validate(fields()[1], value);
      this.coordinates = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'coordinates' field has been set.
      * @return True if the 'coordinates' field has been set, false otherwise.
      */
    public boolean hasCoordinates() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'coordinates' field.
      * @return This builder.
      */
    public Polygon.Builder clearCoordinates() {
      coordinates = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Polygon build() {
      try {
        Polygon record = new Polygon();
        record.type = fieldSetFlags()[0] ? this.type : (PolygonType) defaultValue(fields()[0]);
        record.coordinates = fieldSetFlags()[1] ? this.coordinates : (java.util.List<Object>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
